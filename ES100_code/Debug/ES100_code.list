
ES100_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a6c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002b2c  08002b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bb4  08002bb4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bb4  08002bb4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bb4  08002bb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bb4  08002bb4  00012bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bb8  08002bb8  00012bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08002bc8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002bc8  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f790  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000246b  00000000  00000000  0002f807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00031c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a85  00000000  00000000  000329d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000142cd  00000000  00000000  00033455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116b3  00000000  00000000  00047722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e5aa  00000000  00000000  00058dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f80  00000000  00000000  000d7380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000da300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b14 	.word	0x08002b14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002b14 	.word	0x08002b14

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <Button_Update>:
  return 0;
}


void Button_Update(void)
{
 80003f4:	b5b0      	push	{r4, r5, r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
  uint8_t key = 0;
 80003fa:	230f      	movs	r3, #15
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	2200      	movs	r2, #0
 8000400:	701a      	strb	r2, [r3, #0]

  while(key < this->count)
 8000402:	e16e      	b.n	80006e2 <Button_Update+0x2ee>
  {
    btn_state_t now_pressed = BTN_STATE_NONE;
 8000404:	250e      	movs	r5, #14
 8000406:	197b      	adds	r3, r7, r5
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
    const uint32_t *port = this->instance[key].port;
 800040c:	4bbc      	ldr	r3, [pc, #752]	; (8000700 <Button_Update+0x30c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	240f      	movs	r4, #15
 8000414:	193b      	adds	r3, r7, r4
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	011b      	lsls	r3, r3, #4
 800041a:	18d3      	adds	r3, r2, r3
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	60bb      	str	r3, [r7, #8]
    const uint32_t pin = this->instance[key].pin;
 8000420:	4bb7      	ldr	r3, [pc, #732]	; (8000700 <Button_Update+0x30c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	193b      	adds	r3, r7, r4
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	011b      	lsls	r3, r3, #4
 800042c:	18d3      	adds	r3, r2, r3
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	607b      	str	r3, [r7, #4]

    now_pressed = (this->port_read(port, pin) ? BTN_STATE_SHORT : BTN_STATE_NONE);
 8000432:	4bb3      	ldr	r3, [pc, #716]	; (8000700 <Button_Update+0x30c>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	6879      	ldr	r1, [r7, #4]
 800043a:	68ba      	ldr	r2, [r7, #8]
 800043c:	0010      	movs	r0, r2
 800043e:	4798      	blx	r3
 8000440:	0003      	movs	r3, r0
 8000442:	1e5a      	subs	r2, r3, #1
 8000444:	4193      	sbcs	r3, r2
 8000446:	b2da      	uxtb	r2, r3
 8000448:	197b      	adds	r3, r7, r5
 800044a:	701a      	strb	r2, [r3, #0]
    
    if (BTN_STATE_SHORT == now_pressed)                 // Button pressed
 800044c:	197b      	adds	r3, r7, r5
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b01      	cmp	r3, #1
 8000452:	d000      	beq.n	8000456 <Button_Update+0x62>
 8000454:	e0a1      	b.n	800059a <Button_Update+0x1a6>
    {
      if (!this->instance[key].state.locked)
 8000456:	4baa      	ldr	r3, [pc, #680]	; (8000700 <Button_Update+0x30c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	193b      	adds	r3, r7, r4
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	011b      	lsls	r3, r3, #4
 8000462:	18d3      	adds	r3, r2, r3
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2210      	movs	r2, #16
 8000468:	4013      	ands	r3, r2
 800046a:	b2db      	uxtb	r3, r3
 800046c:	2b00      	cmp	r3, #0
 800046e:	d125      	bne.n	80004bc <Button_Update+0xc8>
      {
        if (++this->instance[key].lock_count >= BTN_DEBOUNCE_TIME) // Debounce time
 8000470:	4ba3      	ldr	r3, [pc, #652]	; (8000700 <Button_Update+0x30c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	0025      	movs	r5, r4
 8000478:	193b      	adds	r3, r7, r4
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	011b      	lsls	r3, r3, #4
 800047e:	18d3      	adds	r3, r2, r3
 8000480:	785a      	ldrb	r2, [r3, #1]
 8000482:	3201      	adds	r2, #1
 8000484:	b2d2      	uxtb	r2, r2
 8000486:	705a      	strb	r2, [r3, #1]
 8000488:	785c      	ldrb	r4, [r3, #1]
 800048a:	4b9d      	ldr	r3, [pc, #628]	; (8000700 <Button_Update+0x30c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	799a      	ldrb	r2, [r3, #6]
 8000490:	4b9b      	ldr	r3, [pc, #620]	; (8000700 <Button_Update+0x30c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	795b      	ldrb	r3, [r3, #5]
 8000496:	0019      	movs	r1, r3
 8000498:	0010      	movs	r0, r2
 800049a:	f7ff fe35 	bl	8000108 <__udivsi3>
 800049e:	0003      	movs	r3, r0
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	429c      	cmp	r4, r3
 80004a4:	d30a      	bcc.n	80004bc <Button_Update+0xc8>
        {
          this->instance[key].state.locked = 1;
 80004a6:	4b96      	ldr	r3, [pc, #600]	; (8000700 <Button_Update+0x30c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	197b      	adds	r3, r7, r5
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	011b      	lsls	r3, r3, #4
 80004b2:	18d3      	adds	r3, r2, r3
 80004b4:	781a      	ldrb	r2, [r3, #0]
 80004b6:	2110      	movs	r1, #16
 80004b8:	430a      	orrs	r2, r1
 80004ba:	701a      	strb	r2, [r3, #0]
        }
      }

      if ((this->instance[key].state.locked) && 
 80004bc:	4b90      	ldr	r3, [pc, #576]	; (8000700 <Button_Update+0x30c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	250f      	movs	r5, #15
 80004c4:	197b      	adds	r3, r7, r5
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	011b      	lsls	r3, r3, #4
 80004ca:	18d3      	adds	r3, r2, r3
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2210      	movs	r2, #16
 80004d0:	4013      	ands	r3, r2
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d047      	beq.n	8000568 <Button_Update+0x174>
          (BTN_STATE_SHORT == this->instance[key].state.prew))
 80004d8:	4b89      	ldr	r3, [pc, #548]	; (8000700 <Button_Update+0x30c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	011b      	lsls	r3, r3, #4
 80004e4:	18d3      	adds	r3, r2, r3
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	220c      	movs	r2, #12
 80004ea:	4013      	ands	r3, r2
 80004ec:	b2db      	uxtb	r3, r3
      if ((this->instance[key].state.locked) && 
 80004ee:	2b04      	cmp	r3, #4
 80004f0:	d13a      	bne.n	8000568 <Button_Update+0x174>
      {
        if (++this->instance[key].long_count >= BTN_LONG_PRESS_TIME(key))
 80004f2:	4b83      	ldr	r3, [pc, #524]	; (8000700 <Button_Update+0x30c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	197b      	adds	r3, r7, r5
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	011b      	lsls	r3, r3, #4
 80004fe:	18d3      	adds	r3, r2, r3
 8000500:	885a      	ldrh	r2, [r3, #2]
 8000502:	3201      	adds	r2, #1
 8000504:	b292      	uxth	r2, r2
 8000506:	805a      	strh	r2, [r3, #2]
 8000508:	885b      	ldrh	r3, [r3, #2]
 800050a:	001c      	movs	r4, r3
 800050c:	4b7c      	ldr	r3, [pc, #496]	; (8000700 <Button_Update+0x30c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	197b      	adds	r3, r7, r5
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	011b      	lsls	r3, r3, #4
 8000518:	18d3      	adds	r3, r2, r3
 800051a:	889b      	ldrh	r3, [r3, #4]
 800051c:	001a      	movs	r2, r3
 800051e:	4b78      	ldr	r3, [pc, #480]	; (8000700 <Button_Update+0x30c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	795b      	ldrb	r3, [r3, #5]
 8000524:	0019      	movs	r1, r3
 8000526:	0010      	movs	r0, r2
 8000528:	f7ff fe78 	bl	800021c <__divsi3>
 800052c:	0003      	movs	r3, r0
 800052e:	429c      	cmp	r4, r3
 8000530:	db1a      	blt.n	8000568 <Button_Update+0x174>
        {
          this->instance[key].state.act = BTN_STATE_LONG;
 8000532:	4b73      	ldr	r3, [pc, #460]	; (8000700 <Button_Update+0x30c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	0028      	movs	r0, r5
 800053a:	183b      	adds	r3, r7, r0
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	011b      	lsls	r3, r3, #4
 8000540:	18d3      	adds	r3, r2, r3
 8000542:	781a      	ldrb	r2, [r3, #0]
 8000544:	2103      	movs	r1, #3
 8000546:	438a      	bics	r2, r1
 8000548:	1c11      	adds	r1, r2, #0
 800054a:	2202      	movs	r2, #2
 800054c:	430a      	orrs	r2, r1
 800054e:	701a      	strb	r2, [r3, #0]
          if (NULL != this->long_press) this->long_press(key);
 8000550:	4b6b      	ldr	r3, [pc, #428]	; (8000700 <Button_Update+0x30c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d006      	beq.n	8000568 <Button_Update+0x174>
 800055a:	4b69      	ldr	r3, [pc, #420]	; (8000700 <Button_Update+0x30c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	183a      	adds	r2, r7, r0
 8000562:	7812      	ldrb	r2, [r2, #0]
 8000564:	0010      	movs	r0, r2
 8000566:	4798      	blx	r3
        }
      }
      this->instance[key].state.prew = now_pressed;
 8000568:	4b65      	ldr	r3, [pc, #404]	; (8000700 <Button_Update+0x30c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	230f      	movs	r3, #15
 8000570:	18fb      	adds	r3, r7, r3
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	18d3      	adds	r3, r2, r3
 8000578:	220e      	movs	r2, #14
 800057a:	18ba      	adds	r2, r7, r2
 800057c:	7812      	ldrb	r2, [r2, #0]
 800057e:	2103      	movs	r1, #3
 8000580:	400a      	ands	r2, r1
 8000582:	b2d2      	uxtb	r2, r2
 8000584:	2103      	movs	r1, #3
 8000586:	400a      	ands	r2, r1
 8000588:	0090      	lsls	r0, r2, #2
 800058a:	781a      	ldrb	r2, [r3, #0]
 800058c:	210c      	movs	r1, #12
 800058e:	438a      	bics	r2, r1
 8000590:	1c11      	adds	r1, r2, #0
 8000592:	1c02      	adds	r2, r0, #0
 8000594:	430a      	orrs	r2, r1
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	e09d      	b.n	80006d6 <Button_Update+0x2e2>
    }
    else if (BTN_STATE_NONE == now_pressed)            // Button released
 800059a:	230e      	movs	r3, #14
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d000      	beq.n	80005a6 <Button_Update+0x1b2>
 80005a4:	e097      	b.n	80006d6 <Button_Update+0x2e2>
    {
      if (this->instance[key].state.locked)
 80005a6:	4b56      	ldr	r3, [pc, #344]	; (8000700 <Button_Update+0x30c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	210f      	movs	r1, #15
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	18d3      	adds	r3, r2, r3
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2210      	movs	r2, #16
 80005ba:	4013      	ands	r3, r2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d100      	bne.n	80005c4 <Button_Update+0x1d0>
 80005c2:	e07e      	b.n	80006c2 <Button_Update+0x2ce>
      {
        if (this->instance[key].lock_count)
 80005c4:	4b4e      	ldr	r3, [pc, #312]	; (8000700 <Button_Update+0x30c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	18d3      	adds	r3, r2, r3
 80005d2:	785b      	ldrb	r3, [r3, #1]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <Button_Update+0x1fc>
        { 
          this->instance[key].lock_count--;
 80005d8:	4b49      	ldr	r3, [pc, #292]	; (8000700 <Button_Update+0x30c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	011b      	lsls	r3, r3, #4
 80005e4:	18d3      	adds	r3, r2, r3
 80005e6:	785a      	ldrb	r2, [r3, #1]
 80005e8:	3a01      	subs	r2, #1
 80005ea:	b2d2      	uxtb	r2, r2
 80005ec:	705a      	strb	r2, [r3, #1]
 80005ee:	e072      	b.n	80006d6 <Button_Update+0x2e2>
        }
        else
        {
          this->instance[key].state.locked = 0;
 80005f0:	4b43      	ldr	r3, [pc, #268]	; (8000700 <Button_Update+0x30c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	250f      	movs	r5, #15
 80005f8:	197b      	adds	r3, r7, r5
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	011b      	lsls	r3, r3, #4
 80005fe:	18d3      	adds	r3, r2, r3
 8000600:	781a      	ldrb	r2, [r3, #0]
 8000602:	2110      	movs	r1, #16
 8000604:	438a      	bics	r2, r1
 8000606:	701a      	strb	r2, [r3, #0]
          if (this->instance[key].long_count < BTN_LONG_PRESS_TIME(key))
 8000608:	4b3d      	ldr	r3, [pc, #244]	; (8000700 <Button_Update+0x30c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	197b      	adds	r3, r7, r5
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	011b      	lsls	r3, r3, #4
 8000614:	18d3      	adds	r3, r2, r3
 8000616:	885b      	ldrh	r3, [r3, #2]
 8000618:	001c      	movs	r4, r3
 800061a:	4b39      	ldr	r3, [pc, #228]	; (8000700 <Button_Update+0x30c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	197b      	adds	r3, r7, r5
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	18d3      	adds	r3, r2, r3
 8000628:	889b      	ldrh	r3, [r3, #4]
 800062a:	001a      	movs	r2, r3
 800062c:	4b34      	ldr	r3, [pc, #208]	; (8000700 <Button_Update+0x30c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	795b      	ldrb	r3, [r3, #5]
 8000632:	0019      	movs	r1, r3
 8000634:	0010      	movs	r0, r2
 8000636:	f7ff fdf1 	bl	800021c <__divsi3>
 800063a:	0003      	movs	r3, r0
 800063c:	429c      	cmp	r4, r3
 800063e:	da25      	bge.n	800068c <Button_Update+0x298>
          {
            if (0 == this->instance[key].lock_count)
 8000640:	4b2f      	ldr	r3, [pc, #188]	; (8000700 <Button_Update+0x30c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	0028      	movs	r0, r5
 8000648:	183b      	adds	r3, r7, r0
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	011b      	lsls	r3, r3, #4
 800064e:	18d3      	adds	r3, r2, r3
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d13f      	bne.n	80006d6 <Button_Update+0x2e2>
            {
              this->instance[key].state.act = BTN_STATE_SHORT;
 8000656:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <Button_Update+0x30c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	183b      	adds	r3, r7, r0
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	18d3      	adds	r3, r2, r3
 8000664:	781a      	ldrb	r2, [r3, #0]
 8000666:	2103      	movs	r1, #3
 8000668:	438a      	bics	r2, r1
 800066a:	1c11      	adds	r1, r2, #0
 800066c:	2201      	movs	r2, #1
 800066e:	430a      	orrs	r2, r1
 8000670:	701a      	strb	r2, [r3, #0]
              if (NULL != this->short_release) this->short_release(key);
 8000672:	4b23      	ldr	r3, [pc, #140]	; (8000700 <Button_Update+0x30c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	691b      	ldr	r3, [r3, #16]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d02c      	beq.n	80006d6 <Button_Update+0x2e2>
 800067c:	4b20      	ldr	r3, [pc, #128]	; (8000700 <Button_Update+0x30c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	183a      	adds	r2, r7, r0
 8000684:	7812      	ldrb	r2, [r2, #0]
 8000686:	0010      	movs	r0, r2
 8000688:	4798      	blx	r3
 800068a:	e024      	b.n	80006d6 <Button_Update+0x2e2>
            }
          }
          else
          {
            if (BTN_STATE_LONG == this->instance[key].state.act)
 800068c:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <Button_Update+0x30c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	210f      	movs	r1, #15
 8000694:	187b      	adds	r3, r7, r1
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	011b      	lsls	r3, r3, #4
 800069a:	18d3      	adds	r3, r2, r3
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2203      	movs	r2, #3
 80006a0:	4013      	ands	r3, r2
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d116      	bne.n	80006d6 <Button_Update+0x2e2>
            {
              if (NULL != this->long_release) this->long_release(key);
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <Button_Update+0x30c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d011      	beq.n	80006d6 <Button_Update+0x2e2>
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <Button_Update+0x30c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	187a      	adds	r2, r7, r1
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	0010      	movs	r0, r2
 80006be:	4798      	blx	r3
 80006c0:	e009      	b.n	80006d6 <Button_Update+0x2e2>
          }
        }
      }
      else
      {
        this->instance[key].long_count = 0;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <Button_Update+0x30c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	230f      	movs	r3, #15
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	18d3      	adds	r3, r2, r3
 80006d2:	2200      	movs	r2, #0
 80006d4:	805a      	strh	r2, [r3, #2]
      }
    }
    key++;
 80006d6:	210f      	movs	r1, #15
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	781a      	ldrb	r2, [r3, #0]
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	3201      	adds	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
  while(key < this->count)
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <Button_Update+0x30c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	220f      	movs	r2, #15
 80006ea:	18ba      	adds	r2, r7, r2
 80006ec:	7812      	ldrb	r2, [r2, #0]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d200      	bcs.n	80006f4 <Button_Update+0x300>
 80006f2:	e687      	b.n	8000404 <Button_Update+0x10>
  }
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b004      	add	sp, #16
 80006fc:	bdb0      	pop	{r4, r5, r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	20000028 	.word	0x20000028

08000704 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b089      	sub	sp, #36	; 0x24
 8000708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	240c      	movs	r4, #12
 800070c:	193b      	adds	r3, r7, r4
 800070e:	0018      	movs	r0, r3
 8000710:	2314      	movs	r3, #20
 8000712:	001a      	movs	r2, r3
 8000714:	2100      	movs	r1, #0
 8000716:	f002 f9d1 	bl	8002abc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <MX_GPIO_Init+0xc0>)
 800071c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800071e:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <MX_GPIO_Init+0xc0>)
 8000720:	2102      	movs	r1, #2
 8000722:	430a      	orrs	r2, r1
 8000724:	635a      	str	r2, [r3, #52]	; 0x34
 8000726:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <MX_GPIO_Init+0xc0>)
 8000728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072a:	2202      	movs	r2, #2
 800072c:	4013      	ands	r3, r2
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <MX_GPIO_Init+0xc0>)
 8000734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000736:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <MX_GPIO_Init+0xc0>)
 8000738:	2104      	movs	r1, #4
 800073a:	430a      	orrs	r2, r1
 800073c:	635a      	str	r2, [r3, #52]	; 0x34
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_GPIO_Init+0xc0>)
 8000740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000742:	2204      	movs	r2, #4
 8000744:	4013      	ands	r3, r2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_GPIO_Init+0xc0>)
 800074c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_GPIO_Init+0xc0>)
 8000750:	2101      	movs	r1, #1
 8000752:	430a      	orrs	r2, r1
 8000754:	635a      	str	r2, [r3, #52]	; 0x34
 8000756:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_GPIO_Init+0xc0>)
 8000758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800075a:	2201      	movs	r2, #1
 800075c:	4013      	ands	r3, r2
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ON_Pin|EN_Pin|LED_Pin, GPIO_PIN_RESET);
 8000762:	23d0      	movs	r3, #208	; 0xd0
 8000764:	0059      	lsls	r1, r3, #1
 8000766:	23a0      	movs	r3, #160	; 0xa0
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	2200      	movs	r2, #0
 800076c:	0018      	movs	r0, r3
 800076e:	f000 fe12 	bl	8001396 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ON_Pin|EN_Pin|LED_Pin;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	22d0      	movs	r2, #208	; 0xd0
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2201      	movs	r2, #1
 800077e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	193a      	adds	r2, r7, r4
 800078e:	23a0      	movs	r3, #160	; 0xa0
 8000790:	05db      	lsls	r3, r3, #23
 8000792:	0011      	movs	r1, r2
 8000794:	0018      	movs	r0, r3
 8000796:	f000 fc77 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800079a:	193b      	adds	r3, r7, r4
 800079c:	2240      	movs	r2, #64	; 0x40
 800079e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	2200      	movs	r2, #0
 80007a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80007ac:	193a      	adds	r2, r7, r4
 80007ae:	23a0      	movs	r3, #160	; 0xa0
 80007b0:	05db      	lsls	r3, r3, #23
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f000 fc67 	bl	8001088 <HAL_GPIO_Init>

}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b009      	add	sp, #36	; 0x24
 80007c0:	bd90      	pop	{r4, r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	40021000 	.word	0x40021000

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b08d      	sub	sp, #52	; 0x34
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ce:	f000 fadc 	bl	8000d8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d2:	f000 f849 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d6:	f7ff ff95 	bl	8000704 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007da:	f000 f9d9 	bl	8000b90 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 80007de:	f000 f987 	bl	8000af0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */


  btn_instance_t keys[1] = {
 80007e2:	2420      	movs	r4, #32
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	0018      	movs	r0, r3
 80007e8:	2310      	movs	r3, #16
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f002 f965 	bl	8002abc <memset>
 80007f2:	0021      	movs	r1, r4
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	22a0      	movs	r2, #160	; 0xa0
 80007f8:	05d2      	lsls	r2, r2, #23
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2240      	movs	r2, #64	; 0x40
 8000800:	60da      	str	r2, [r3, #12]
          .port = BUTTON_GPIO_Port,
          .pin = BUTTON_Pin,
      },
  };

  btn_init_t btn_init = {
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	0018      	movs	r0, r3
 8000806:	231c      	movs	r3, #28
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f002 f956 	bl	8002abc <memset>
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	220a      	movs	r2, #10
 8000814:	715a      	strb	r2, [r3, #5]
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2214      	movs	r2, #20
 800081a:	719a      	strb	r2, [r3, #6]
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <main+0x90>)
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4a0d      	ldr	r2, [pc, #52]	; (800085c <main+0x94>)
 8000826:	611a      	str	r2, [r3, #16]
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <main+0x98>)
 800082c:	615a      	str	r2, [r3, #20]
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <main+0x9c>)
 8000832:	619a      	str	r2, [r3, #24]
      .short_release = Button_ShortRelease,
      .long_release = Button_LongRelease,
      .long_press = Button_LongPress,
  };

  InitialLongPress(BUTTON_GPIO_Port, BUTTON_Pin);
 8000834:	23a0      	movs	r3, #160	; 0xa0
 8000836:	05db      	lsls	r3, r3, #23
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	0018      	movs	r0, r3
 800083c:	f000 f86a 	bl	8000914 <InitialLongPress>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  BUTTON_CHECK(GPIOA, GPIO_PIN_2);
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	005a      	lsls	r2, r3, #1
 8000844:	23a0      	movs	r3, #160	; 0xa0
 8000846:	05db      	lsls	r3, r3, #23
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f000 fdc0 	bl	80013d0 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000850:	20c8      	movs	r0, #200	; 0xc8
 8000852:	f000 fb17 	bl	8000e84 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000856:	e7f3      	b.n	8000840 <main+0x78>
 8000858:	0800135d 	.word	0x0800135d
 800085c:	08000a01 	.word	0x08000a01
 8000860:	08000a29 	.word	0x08000a29
 8000864:	08000a15 	.word	0x08000a15

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b08d      	sub	sp, #52	; 0x34
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	2414      	movs	r4, #20
 8000870:	193b      	adds	r3, r7, r4
 8000872:	0018      	movs	r0, r3
 8000874:	231c      	movs	r3, #28
 8000876:	001a      	movs	r2, r3
 8000878:	2100      	movs	r1, #0
 800087a:	f002 f91f 	bl	8002abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087e:	003b      	movs	r3, r7
 8000880:	0018      	movs	r0, r3
 8000882:	2314      	movs	r3, #20
 8000884:	001a      	movs	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	f002 f918 	bl	8002abc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088c:	193b      	adds	r3, r7, r4
 800088e:	2202      	movs	r2, #2
 8000890:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000892:	193b      	adds	r3, r7, r4
 8000894:	2280      	movs	r2, #128	; 0x80
 8000896:	0052      	lsls	r2, r2, #1
 8000898:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	0112      	lsls	r2, r2, #4
 80008a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	2240      	movs	r2, #64	; 0x40
 80008a6:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 fdac 	bl	8001408 <HAL_RCC_OscConfig>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80008b4:	f000 f8c2 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	003b      	movs	r3, r7
 80008ba:	2207      	movs	r2, #7
 80008bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008be:	003b      	movs	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	003b      	movs	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ca:	003b      	movs	r3, r7
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008d0:	003b      	movs	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d6:	003b      	movs	r3, r7
 80008d8:	2100      	movs	r1, #0
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 ff78 	bl	80017d0 <HAL_RCC_ClockConfig>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80008e4:	f000 f8aa 	bl	8000a3c <Error_Handler>
  }
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b00d      	add	sp, #52	; 0x34
 80008ee:	bd90      	pop	{r4, r7, pc}

080008f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM17){
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d101      	bne.n	8000906 <HAL_TIM_PeriodElapsedCallback+0x16>
		Button_Update();
 8000902:	f7ff fd77 	bl	80003f4 <Button_Update>
	}

}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b002      	add	sp, #8
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	40014800 	.word	0x40014800

08000914 <InitialLongPress>:

void InitialLongPress(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	000a      	movs	r2, r1
 800091e:	1cbb      	adds	r3, r7, #2
 8000920:	801a      	strh	r2, [r3, #0]
	while(1){
		while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)==1){//do until press event
 8000922:	e002      	b.n	800092a <InitialLongPress+0x16>
				HAL_Delay(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f000 faad 	bl	8000e84 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)==1){//do until press event
 800092a:	1cbb      	adds	r3, r7, #2
 800092c:	881a      	ldrh	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	0011      	movs	r1, r2
 8000932:	0018      	movs	r0, r3
 8000934:	f000 fd12 	bl	800135c <HAL_GPIO_ReadPin>
 8000938:	0003      	movs	r3, r0
 800093a:	2b01      	cmp	r3, #1
 800093c:	d0f2      	beq.n	8000924 <InitialLongPress+0x10>
			}
			HAL_Delay(19);
 800093e:	2013      	movs	r0, #19
 8000940:	f000 faa0 	bl	8000e84 <HAL_Delay>
			//debounce check
			if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)==1){
 8000944:	1cbb      	adds	r3, r7, #2
 8000946:	881a      	ldrh	r2, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	0011      	movs	r1, r2
 800094c:	0018      	movs	r0, r3
 800094e:	f000 fd05 	bl	800135c <HAL_GPIO_ReadPin>
 8000952:	0003      	movs	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	d04b      	beq.n	80009f0 <InitialLongPress+0xdc>
				return; //there was a noise
			}
			//duration measurement
			uint32_t pressDuration = HAL_GetTick();
 8000958:	f000 fa8a 	bl	8000e70 <HAL_GetTick>
 800095c:	0003      	movs	r3, r0
 800095e:	60fb      	str	r3, [r7, #12]
			while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)==0){
 8000960:	e03c      	b.n	80009dc <InitialLongPress+0xc8>
				if (HAL_GetTick()- pressDuration >= 1500){
 8000962:	f000 fa85 	bl	8000e70 <HAL_GetTick>
 8000966:	0002      	movs	r2, r0
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	4a23      	ldr	r2, [pc, #140]	; (80009fc <InitialLongPress+0xe8>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d931      	bls.n	80009d6 <InitialLongPress+0xc2>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000972:	2380      	movs	r3, #128	; 0x80
 8000974:	0059      	lsls	r1, r3, #1
 8000976:	23a0      	movs	r3, #160	; 0xa0
 8000978:	05db      	lsls	r3, r3, #23
 800097a:	2201      	movs	r2, #1
 800097c:	0018      	movs	r0, r3
 800097e:	f000 fd0a 	bl	8001396 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ON_GPIO_Port, ON_Pin, GPIO_PIN_SET);
 8000982:	23a0      	movs	r3, #160	; 0xa0
 8000984:	05db      	lsls	r3, r3, #23
 8000986:	2201      	movs	r2, #1
 8000988:	2120      	movs	r1, #32
 800098a:	0018      	movs	r0, r3
 800098c:	f000 fd03 	bl	8001396 <HAL_GPIO_WritePin>

					while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)==0){//do until release event
 8000990:	e002      	b.n	8000998 <InitialLongPress+0x84>
						HAL_Delay(1);
 8000992:	2001      	movs	r0, #1
 8000994:	f000 fa76 	bl	8000e84 <HAL_Delay>
					while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)==0){//do until release event
 8000998:	1cbb      	adds	r3, r7, #2
 800099a:	881a      	ldrh	r2, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	0011      	movs	r1, r2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fcdb 	bl	800135c <HAL_GPIO_ReadPin>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d0f3      	beq.n	8000992 <InitialLongPress+0x7e>
					}
					HAL_Delay(20);
 80009aa:	2014      	movs	r0, #20
 80009ac:	f000 fa6a 	bl	8000e84 <HAL_Delay>
					if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)==1){// if the button is released
 80009b0:	1cbb      	adds	r3, r7, #2
 80009b2:	881a      	ldrh	r2, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 fccf 	bl	800135c <HAL_GPIO_ReadPin>
 80009be:	0003      	movs	r3, r0
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d117      	bne.n	80009f4 <InitialLongPress+0xe0>
						//do something
						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	0059      	lsls	r1, r3, #1
 80009c8:	23a0      	movs	r3, #160	; 0xa0
 80009ca:	05db      	lsls	r3, r3, #23
 80009cc:	2200      	movs	r2, #0
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 fce1 	bl	8001396 <HAL_GPIO_WritePin>
					}
					return;
 80009d4:	e00e      	b.n	80009f4 <InitialLongPress+0xe0>
				}
				HAL_Delay(1);
 80009d6:	2001      	movs	r0, #1
 80009d8:	f000 fa54 	bl	8000e84 <HAL_Delay>
			while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)==0){
 80009dc:	1cbb      	adds	r3, r7, #2
 80009de:	881a      	ldrh	r2, [r3, #0]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fcb9 	bl	800135c <HAL_GPIO_ReadPin>
 80009ea:	1e03      	subs	r3, r0, #0
 80009ec:	d0b9      	beq.n	8000962 <InitialLongPress+0x4e>
	while(1){
 80009ee:	e798      	b.n	8000922 <InitialLongPress+0xe>
				return; //there was a noise
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	e000      	b.n	80009f6 <InitialLongPress+0xe2>
					return;
 80009f4:	46c0      	nop			; (mov r8, r8)
			}
	}


}
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b004      	add	sp, #16
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	000005db 	.word	0x000005db

08000a00 <Button_ShortRelease>:

void Button_ShortRelease(uint8_t btnCode){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	0002      	movs	r2, r0
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	701a      	strb	r2, [r3, #0]

}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b002      	add	sp, #8
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <Button_LongPress>:
void Button_LongPress(uint8_t btnCode){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	0002      	movs	r2, r0
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	701a      	strb	r2, [r3, #0]

}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b002      	add	sp, #8
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <Button_LongRelease>:
void Button_LongRelease(uint8_t btnCode){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	0002      	movs	r2, r0
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	701a      	strb	r2, [r3, #0]

}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b002      	add	sp, #8
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_MspInit+0x44>)
 8000a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_MspInit+0x44>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	430a      	orrs	r2, r1
 8000a58:	641a      	str	r2, [r3, #64]	; 0x40
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_MspInit+0x44>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4013      	ands	r3, r2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_MspInit+0x44>)
 8000a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_MspInit+0x44>)
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	0549      	lsls	r1, r1, #21
 8000a70:	430a      	orrs	r2, r1
 8000a72:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <HAL_MspInit+0x44>)
 8000a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	055b      	lsls	r3, r3, #21
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	40021000 	.word	0x40021000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab4:	f000 f9ca 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <TIM17_IRQHandler+0x14>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 f936 	bl	8001d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	2000002c 	.word	0x2000002c

08000ad8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <SystemInit+0x14>)
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	0512      	lsls	r2, r2, #20
 8000ae2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_TIM17_Init+0x44>)
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <MX_TIM17_Init+0x48>)
 8000af8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_TIM17_Init+0x44>)
 8000afc:	2203      	movs	r2, #3
 8000afe:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_TIM17_Init+0x44>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 59999;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_TIM17_Init+0x44>)
 8000b08:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <MX_TIM17_Init+0x4c>)
 8000b0a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_TIM17_Init+0x44>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_TIM17_Init+0x44>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_TIM17_Init+0x44>)
 8000b1a:	2280      	movs	r2, #128	; 0x80
 8000b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <MX_TIM17_Init+0x44>)
 8000b20:	0018      	movs	r0, r3
 8000b22:	f001 f8b1 	bl	8001c88 <HAL_TIM_Base_Init>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000b2a:	f7ff ff87 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000002c 	.word	0x2000002c
 8000b38:	40014800 	.word	0x40014800
 8000b3c:	0000ea5f 	.word	0x0000ea5f

08000b40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_TIM_Base_MspInit+0x48>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d115      	bne.n	8000b7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_TIM_Base_MspInit+0x4c>)
 8000b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_TIM_Base_MspInit+0x4c>)
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	02c9      	lsls	r1, r1, #11
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	641a      	str	r2, [r3, #64]	; 0x40
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_TIM_Base_MspInit+0x4c>)
 8000b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	02db      	lsls	r3, r3, #11
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	2016      	movs	r0, #22
 8000b74:	f000 fa56 	bl	8001024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000b78:	2016      	movs	r0, #22
 8000b7a:	f000 fa68 	bl	800104e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b004      	add	sp, #16
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	40014800 	.word	0x40014800
 8000b8c:	40021000 	.word	0x40021000

08000b90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b94:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000b96:	4a24      	ldr	r2, [pc, #144]	; (8000c28 <MX_USART1_UART_Init+0x98>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b9a:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000b9c:	22e1      	movs	r2, #225	; 0xe1
 8000b9e:	0252      	lsls	r2, r2, #9
 8000ba0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f001 fa52 	bl	8002084 <HAL_UART_Init>
 8000be0:	1e03      	subs	r3, r0, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000be4:	f7ff ff2a 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bea:	2100      	movs	r1, #0
 8000bec:	0018      	movs	r0, r3
 8000bee:	f001 fe85 	bl	80028fc <HAL_UARTEx_SetTxFifoThreshold>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bf6:	f7ff ff21 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f001 febc 	bl	800297c <HAL_UARTEx_SetRxFifoThreshold>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c08:	f7ff ff18 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <MX_USART1_UART_Init+0x94>)
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f001 fe3a 	bl	8002888 <HAL_UARTEx_DisableFifoMode>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c18:	f7ff ff10 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	20000078 	.word	0x20000078
 8000c28:	40013800 	.word	0x40013800

08000c2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b093      	sub	sp, #76	; 0x4c
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	2334      	movs	r3, #52	; 0x34
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	0018      	movs	r0, r3
 8000c3a:	2314      	movs	r3, #20
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f001 ff3c 	bl	8002abc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c44:	2418      	movs	r4, #24
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	0018      	movs	r0, r3
 8000c4a:	231c      	movs	r3, #28
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f001 ff34 	bl	8002abc <memset>
  if(uartHandle->Instance==USART1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a33      	ldr	r2, [pc, #204]	; (8000d28 <HAL_UART_MspInit+0xfc>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d160      	bne.n	8000d20 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c5e:	193b      	adds	r3, r7, r4
 8000c60:	2201      	movs	r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000c64:	193b      	adds	r3, r7, r4
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 ff1d 	bl	8001aac <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	1e03      	subs	r3, r0, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c76:	f7ff fee1 	bl	8000a3c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c7e:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000c80:	2180      	movs	r1, #128	; 0x80
 8000c82:	01c9      	lsls	r1, r1, #7
 8000c84:	430a      	orrs	r2, r1
 8000c86:	641a      	str	r2, [r3, #64]	; 0x40
 8000c88:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	01db      	lsls	r3, r3, #7
 8000c90:	4013      	ands	r3, r2
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c9a:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000cb4:	2104      	movs	r1, #4
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PC14-OSCX_IN (PC14)     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cc6:	2434      	movs	r4, #52	; 0x34
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	4a11      	ldr	r2, [pc, #68]	; (8000d30 <HAL_UART_MspInit+0x104>)
 8000cea:	0019      	movs	r1, r3
 8000cec:	0010      	movs	r0, r2
 8000cee:	f000 f9cb 	bl	8001088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000cf2:	0021      	movs	r1, r4
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	01d2      	lsls	r2, r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2202      	movs	r2, #2
 8000d00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_UART_MspInit+0x108>)
 8000d18:	0019      	movs	r1, r3
 8000d1a:	0010      	movs	r0, r2
 8000d1c:	f000 f9b4 	bl	8001088 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b013      	add	sp, #76	; 0x4c
 8000d26:	bd90      	pop	{r4, r7, pc}
 8000d28:	40013800 	.word	0x40013800
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	50000400 	.word	0x50000400
 8000d34:	50000800 	.word	0x50000800

08000d38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d38:	480d      	ldr	r0, [pc, #52]	; (8000d70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d3a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d3c:	f7ff fecc 	bl	8000ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d40:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d42:	e003      	b.n	8000d4c <LoopCopyDataInit>

08000d44 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000d46:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d48:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d4a:	3104      	adds	r1, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d4c:	480a      	ldr	r0, [pc, #40]	; (8000d78 <LoopForever+0xa>)
  ldr r3, =_edata
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <LoopForever+0xe>)
  adds r2, r0, r1
 8000d50:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d52:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d54:	d3f6      	bcc.n	8000d44 <CopyDataInit>
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <LoopForever+0x12>)
  b LoopFillZerobss
 8000d58:	e002      	b.n	8000d60 <LoopFillZerobss>

08000d5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000d5c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5e:	3204      	adds	r2, #4

08000d60 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <LoopForever+0x16>)
  cmp r2, r3
 8000d62:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d64:	d3f9      	bcc.n	8000d5a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000d66:	f001 feb1 	bl	8002acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d6a:	f7ff fd2d 	bl	80007c8 <main>

08000d6e <LoopForever>:

LoopForever:
    b LoopForever
 8000d6e:	e7fe      	b.n	8000d6e <LoopForever>
  ldr   r0, =_estack
 8000d70:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000d74:	08002bbc 	.word	0x08002bbc
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000d80:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000d84:	20000110 	.word	0x20000110

08000d88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC1_IRQHandler>

08000d8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d90:	1dfb      	adds	r3, r7, #7
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d96:	2003      	movs	r0, #3
 8000d98:	f000 f80e 	bl	8000db8 <HAL_InitTick>
 8000d9c:	1e03      	subs	r3, r0, #0
 8000d9e:	d003      	beq.n	8000da8 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e001      	b.n	8000dac <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000da8:	f7ff fe4e 	bl	8000a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dac:	1dfb      	adds	r3, r7, #7
 8000dae:	781b      	ldrb	r3, [r3, #0]
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc0:	230f      	movs	r3, #15
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_InitTick+0x88>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d02b      	beq.n	8000e28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <HAL_InitTick+0x8c>)
 8000dd2:	681c      	ldr	r4, [r3, #0]
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <HAL_InitTick+0x88>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	0019      	movs	r1, r3
 8000dda:	23fa      	movs	r3, #250	; 0xfa
 8000ddc:	0098      	lsls	r0, r3, #2
 8000dde:	f7ff f993 	bl	8000108 <__udivsi3>
 8000de2:	0003      	movs	r3, r0
 8000de4:	0019      	movs	r1, r3
 8000de6:	0020      	movs	r0, r4
 8000de8:	f7ff f98e 	bl	8000108 <__udivsi3>
 8000dec:	0003      	movs	r3, r0
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 f93d 	bl	800106e <HAL_SYSTICK_Config>
 8000df4:	1e03      	subs	r3, r0, #0
 8000df6:	d112      	bne.n	8000e1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d80a      	bhi.n	8000e14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	2301      	movs	r3, #1
 8000e02:	425b      	negs	r3, r3
 8000e04:	2200      	movs	r2, #0
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 f90c 	bl	8001024 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_InitTick+0x90>)
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e00d      	b.n	8000e30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e14:	230f      	movs	r3, #15
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
 8000e1c:	e008      	b.n	8000e30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e1e:	230f      	movs	r3, #15
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	e003      	b.n	8000e30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e28:	230f      	movs	r3, #15
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e30:	230f      	movs	r3, #15
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	781b      	ldrb	r3, [r3, #0]
}
 8000e36:	0018      	movs	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b005      	add	sp, #20
 8000e3c:	bd90      	pop	{r4, r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_IncTick+0x1c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	001a      	movs	r2, r3
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_IncTick+0x20>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	18d2      	adds	r2, r2, r3
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_IncTick+0x20>)
 8000e5e:	601a      	str	r2, [r3, #0]
}
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	2000010c 	.word	0x2000010c

08000e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <HAL_GetTick+0x10>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	2000010c 	.word	0x2000010c

08000e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e8c:	f7ff fff0 	bl	8000e70 <HAL_GetTick>
 8000e90:	0003      	movs	r3, r0
 8000e92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	d005      	beq.n	8000eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_Delay+0x44>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	189b      	adds	r3, r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	f7ff ffe0 	bl	8000e70 <HAL_GetTick>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8f7      	bhi.n	8000eac <HAL_Delay+0x28>
  {
  }
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b004      	add	sp, #16
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	20000008 	.word	0x20000008

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ede:	d809      	bhi.n	8000ef4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee0:	1dfb      	adds	r3, r7, #7
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	231f      	movs	r3, #31
 8000ee8:	401a      	ands	r2, r3
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <__NVIC_EnableIRQ+0x30>)
 8000eec:	2101      	movs	r1, #1
 8000eee:	4091      	lsls	r1, r2
 8000ef0:	000a      	movs	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	0002      	movs	r2, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b7f      	cmp	r3, #127	; 0x7f
 8000f14:	d828      	bhi.n	8000f68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f16:	4a2f      	ldr	r2, [pc, #188]	; (8000fd4 <__NVIC_SetPriority+0xd4>)
 8000f18:	1dfb      	adds	r3, r7, #7
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	33c0      	adds	r3, #192	; 0xc0
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	589b      	ldr	r3, [r3, r2]
 8000f26:	1dfa      	adds	r2, r7, #7
 8000f28:	7812      	ldrb	r2, [r2, #0]
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	400a      	ands	r2, r1
 8000f30:	00d2      	lsls	r2, r2, #3
 8000f32:	21ff      	movs	r1, #255	; 0xff
 8000f34:	4091      	lsls	r1, r2
 8000f36:	000a      	movs	r2, r1
 8000f38:	43d2      	mvns	r2, r2
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	019b      	lsls	r3, r3, #6
 8000f42:	22ff      	movs	r2, #255	; 0xff
 8000f44:	401a      	ands	r2, r3
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	4003      	ands	r3, r0
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f54:	481f      	ldr	r0, [pc, #124]	; (8000fd4 <__NVIC_SetPriority+0xd4>)
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	33c0      	adds	r3, #192	; 0xc0
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f66:	e031      	b.n	8000fcc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f68:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <__NVIC_SetPriority+0xd8>)
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	0019      	movs	r1, r3
 8000f70:	230f      	movs	r3, #15
 8000f72:	400b      	ands	r3, r1
 8000f74:	3b08      	subs	r3, #8
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	3306      	adds	r3, #6
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	18d3      	adds	r3, r2, r3
 8000f7e:	3304      	adds	r3, #4
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	1dfa      	adds	r2, r7, #7
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	0011      	movs	r1, r2
 8000f88:	2203      	movs	r2, #3
 8000f8a:	400a      	ands	r2, r1
 8000f8c:	00d2      	lsls	r2, r2, #3
 8000f8e:	21ff      	movs	r1, #255	; 0xff
 8000f90:	4091      	lsls	r1, r2
 8000f92:	000a      	movs	r2, r1
 8000f94:	43d2      	mvns	r2, r2
 8000f96:	401a      	ands	r2, r3
 8000f98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	019b      	lsls	r3, r3, #6
 8000f9e:	22ff      	movs	r2, #255	; 0xff
 8000fa0:	401a      	ands	r2, r3
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	2303      	movs	r3, #3
 8000faa:	4003      	ands	r3, r0
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <__NVIC_SetPriority+0xd8>)
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	001c      	movs	r4, r3
 8000fb8:	230f      	movs	r3, #15
 8000fba:	4023      	ands	r3, r4
 8000fbc:	3b08      	subs	r3, #8
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	3306      	adds	r3, #6
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	18c3      	adds	r3, r0, r3
 8000fc8:	3304      	adds	r3, #4
 8000fca:	601a      	str	r2, [r3, #0]
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b003      	add	sp, #12
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	1e5a      	subs	r2, r3, #1
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	045b      	lsls	r3, r3, #17
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d301      	bcc.n	8000ff4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e010      	b.n	8001016 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <SysTick_Config+0x44>)
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	3a01      	subs	r2, #1
 8000ffa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	425b      	negs	r3, r3
 8001000:	2103      	movs	r1, #3
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff ff7c 	bl	8000f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SysTick_Config+0x44>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SysTick_Config+0x44>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	0018      	movs	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	b002      	add	sp, #8
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	210f      	movs	r1, #15
 8001030:	187b      	adds	r3, r7, r1
 8001032:	1c02      	adds	r2, r0, #0
 8001034:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	187b      	adds	r3, r7, r1
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b25b      	sxtb	r3, r3
 800103e:	0011      	movs	r1, r2
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff ff5d 	bl	8000f00 <__NVIC_SetPriority>
}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b004      	add	sp, #16
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	0002      	movs	r2, r0
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b25b      	sxtb	r3, r3
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff ff33 	bl	8000ecc <__NVIC_EnableIRQ>
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff ffaf 	bl	8000fdc <SysTick_Config>
 800107e:	0003      	movs	r3, r0
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b002      	add	sp, #8
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001096:	e14d      	b.n	8001334 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2101      	movs	r1, #1
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4091      	lsls	r1, r2
 80010a2:	000a      	movs	r2, r1
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d100      	bne.n	80010b0 <HAL_GPIO_Init+0x28>
 80010ae:	e13e      	b.n	800132e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x38>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b12      	cmp	r3, #18
 80010be:	d125      	bne.n	800110c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	58d3      	ldr	r3, [r2, r3]
 80010cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	2207      	movs	r2, #7
 80010d2:	4013      	ands	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	409a      	lsls	r2, r3
 80010da:	0013      	movs	r3, r2
 80010dc:	43da      	mvns	r2, r3
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	4013      	ands	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	220f      	movs	r2, #15
 80010ea:	401a      	ands	r2, r3
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	2107      	movs	r1, #7
 80010f0:	400b      	ands	r3, r1
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	409a      	lsls	r2, r3
 80010f6:	0013      	movs	r3, r2
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	6979      	ldr	r1, [r7, #20]
 800110a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	409a      	lsls	r2, r3
 800111a:	0013      	movs	r3, r2
 800111c:	43da      	mvns	r2, r3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	4013      	ands	r3, r2
 8001122:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2203      	movs	r2, #3
 800112a:	401a      	ands	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	409a      	lsls	r2, r3
 8001132:	0013      	movs	r3, r2
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	4313      	orrs	r3, r2
 8001138:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d00b      	beq.n	8001160 <HAL_GPIO_Init+0xd8>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d007      	beq.n	8001160 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001154:	2b11      	cmp	r3, #17
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b12      	cmp	r3, #18
 800115e:	d130      	bne.n	80011c2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	409a      	lsls	r2, r3
 800116e:	0013      	movs	r3, r2
 8001170:	43da      	mvns	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	4013      	ands	r3, r2
 8001176:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	409a      	lsls	r2, r3
 8001182:	0013      	movs	r3, r2
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	4313      	orrs	r3, r2
 8001188:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001196:	2201      	movs	r2, #1
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	409a      	lsls	r2, r3
 800119c:	0013      	movs	r3, r2
 800119e:	43da      	mvns	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	4013      	ands	r3, r2
 80011a4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	2201      	movs	r2, #1
 80011ae:	401a      	ands	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d017      	beq.n	80011fa <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	2203      	movs	r2, #3
 80011d6:	409a      	lsls	r2, r3
 80011d8:	0013      	movs	r3, r2
 80011da:	43da      	mvns	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	4013      	ands	r3, r2
 80011e0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	055b      	lsls	r3, r3, #21
 8001202:	4013      	ands	r3, r2
 8001204:	d100      	bne.n	8001208 <HAL_GPIO_Init+0x180>
 8001206:	e092      	b.n	800132e <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001208:	4a50      	ldr	r2, [pc, #320]	; (800134c <HAL_GPIO_Init+0x2c4>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3318      	adds	r3, #24
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	589b      	ldr	r3, [r3, r2]
 8001214:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	2203      	movs	r2, #3
 800121a:	4013      	ands	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	220f      	movs	r2, #15
 8001220:	409a      	lsls	r2, r3
 8001222:	0013      	movs	r3, r2
 8001224:	43da      	mvns	r2, r3
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	4013      	ands	r3, r2
 800122a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	23a0      	movs	r3, #160	; 0xa0
 8001230:	05db      	lsls	r3, r3, #23
 8001232:	429a      	cmp	r2, r3
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0x1d6>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a45      	ldr	r2, [pc, #276]	; (8001350 <HAL_GPIO_Init+0x2c8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x1d2>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a44      	ldr	r2, [pc, #272]	; (8001354 <HAL_GPIO_Init+0x2cc>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x1ce>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a43      	ldr	r2, [pc, #268]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x1ca>
 800124e:	2305      	movs	r3, #5
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x1d8>
 8001252:	2306      	movs	r3, #6
 8001254:	e004      	b.n	8001260 <HAL_GPIO_Init+0x1d8>
 8001256:	2302      	movs	r3, #2
 8001258:	e002      	b.n	8001260 <HAL_GPIO_Init+0x1d8>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_GPIO_Init+0x1d8>
 800125e:	2300      	movs	r3, #0
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	2103      	movs	r1, #3
 8001264:	400a      	ands	r2, r1
 8001266:	00d2      	lsls	r2, r2, #3
 8001268:	4093      	lsls	r3, r2
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4313      	orrs	r3, r2
 800126e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001270:	4936      	ldr	r1, [pc, #216]	; (800134c <HAL_GPIO_Init+0x2c4>)
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3318      	adds	r3, #24
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800127e:	4a33      	ldr	r2, [pc, #204]	; (800134c <HAL_GPIO_Init+0x2c4>)
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	58d3      	ldr	r3, [r2, r3]
 8001284:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43da      	mvns	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	4013      	ands	r3, r2
 800128e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	025b      	lsls	r3, r3, #9
 8001298:	4013      	ands	r3, r2
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80012a4:	4929      	ldr	r1, [pc, #164]	; (800134c <HAL_GPIO_Init+0x2c4>)
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80012ac:	4a27      	ldr	r2, [pc, #156]	; (800134c <HAL_GPIO_Init+0x2c4>)
 80012ae:	2384      	movs	r3, #132	; 0x84
 80012b0:	58d3      	ldr	r3, [r2, r3]
 80012b2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43da      	mvns	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	4013      	ands	r3, r2
 80012bc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	029b      	lsls	r3, r3, #10
 80012c6:	4013      	ands	r3, r2
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80012d2:	491e      	ldr	r1, [pc, #120]	; (800134c <HAL_GPIO_Init+0x2c4>)
 80012d4:	2284      	movs	r2, #132	; 0x84
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <HAL_GPIO_Init+0x2c4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	43da      	mvns	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	4013      	ands	r3, r2
 80012e8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	035b      	lsls	r3, r3, #13
 80012f2:	4013      	ands	r3, r2
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_GPIO_Init+0x2c4>)
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_GPIO_Init+0x2c4>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43da      	mvns	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	4013      	ands	r3, r2
 8001312:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	039b      	lsls	r3, r3, #14
 800131c:	4013      	ands	r3, r2
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_GPIO_Init+0x2c4>)
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	3301      	adds	r3, #1
 8001332:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	40da      	lsrs	r2, r3
 800133c:	1e13      	subs	r3, r2, #0
 800133e:	d000      	beq.n	8001342 <HAL_GPIO_Init+0x2ba>
 8001340:	e6aa      	b.n	8001098 <HAL_GPIO_Init+0x10>
  }
}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b006      	add	sp, #24
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40021800 	.word	0x40021800
 8001350:	50000400 	.word	0x50000400
 8001354:	50000800 	.word	0x50000800
 8001358:	50001400 	.word	0x50001400

0800135c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	000a      	movs	r2, r1
 8001366:	1cbb      	adds	r3, r7, #2
 8001368:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	1cba      	adds	r2, r7, #2
 8001370:	8812      	ldrh	r2, [r2, #0]
 8001372:	4013      	ands	r3, r2
 8001374:	d004      	beq.n	8001380 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001376:	230f      	movs	r3, #15
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	e003      	b.n	8001388 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001380:	230f      	movs	r3, #15
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001388:	230f      	movs	r3, #15
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	781b      	ldrb	r3, [r3, #0]
}
 800138e:	0018      	movs	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	0008      	movs	r0, r1
 80013a0:	0011      	movs	r1, r2
 80013a2:	1cbb      	adds	r3, r7, #2
 80013a4:	1c02      	adds	r2, r0, #0
 80013a6:	801a      	strh	r2, [r3, #0]
 80013a8:	1c7b      	adds	r3, r7, #1
 80013aa:	1c0a      	adds	r2, r1, #0
 80013ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ae:	1c7b      	adds	r3, r7, #1
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013b6:	1cbb      	adds	r3, r7, #2
 80013b8:	881a      	ldrh	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013be:	e003      	b.n	80013c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013c0:	1cbb      	adds	r3, r7, #2
 80013c2:	881a      	ldrh	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013c8:	46c0      	nop			; (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b002      	add	sp, #8
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	000a      	movs	r2, r1
 80013da:	1cbb      	adds	r3, r7, #2
 80013dc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e4:	1cbb      	adds	r3, r7, #2
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	4013      	ands	r3, r2
 80013ec:	041a      	lsls	r2, r3, #16
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	1cb9      	adds	r1, r7, #2
 80013f4:	8809      	ldrh	r1, [r1, #0]
 80013f6:	400b      	ands	r3, r1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	46bd      	mov	sp, r7
 8001402:	b004      	add	sp, #16
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e1d0      	b.n	80017bc <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2201      	movs	r2, #1
 8001420:	4013      	ands	r3, r2
 8001422:	d100      	bne.n	8001426 <HAL_RCC_OscConfig+0x1e>
 8001424:	e069      	b.n	80014fa <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001426:	4bc8      	ldr	r3, [pc, #800]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2238      	movs	r2, #56	; 0x38
 800142c:	4013      	ands	r3, r2
 800142e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b08      	cmp	r3, #8
 8001434:	d105      	bne.n	8001442 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d15d      	bne.n	80014fa <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e1bc      	b.n	80017bc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	025b      	lsls	r3, r3, #9
 800144a:	429a      	cmp	r2, r3
 800144c:	d107      	bne.n	800145e <HAL_RCC_OscConfig+0x56>
 800144e:	4bbe      	ldr	r3, [pc, #760]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4bbd      	ldr	r3, [pc, #756]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	0249      	lsls	r1, r1, #9
 8001458:	430a      	orrs	r2, r1
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	e020      	b.n	80014a0 <HAL_RCC_OscConfig+0x98>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	23a0      	movs	r3, #160	; 0xa0
 8001464:	02db      	lsls	r3, r3, #11
 8001466:	429a      	cmp	r2, r3
 8001468:	d10e      	bne.n	8001488 <HAL_RCC_OscConfig+0x80>
 800146a:	4bb7      	ldr	r3, [pc, #732]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4bb6      	ldr	r3, [pc, #728]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	02c9      	lsls	r1, r1, #11
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	4bb3      	ldr	r3, [pc, #716]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4bb2      	ldr	r3, [pc, #712]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 800147e:	2180      	movs	r1, #128	; 0x80
 8001480:	0249      	lsls	r1, r1, #9
 8001482:	430a      	orrs	r2, r1
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	e00b      	b.n	80014a0 <HAL_RCC_OscConfig+0x98>
 8001488:	4baf      	ldr	r3, [pc, #700]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4bae      	ldr	r3, [pc, #696]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 800148e:	49af      	ldr	r1, [pc, #700]	; (800174c <HAL_RCC_OscConfig+0x344>)
 8001490:	400a      	ands	r2, r1
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	4bac      	ldr	r3, [pc, #688]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4bab      	ldr	r3, [pc, #684]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 800149a:	49ad      	ldr	r1, [pc, #692]	; (8001750 <HAL_RCC_OscConfig+0x348>)
 800149c:	400a      	ands	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d014      	beq.n	80014d2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fce2 	bl	8000e70 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80014b2:	f7ff fcdd 	bl	8000e70 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b64      	cmp	r3, #100	; 0x64
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e17b      	b.n	80017bc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c4:	4ba0      	ldr	r3, [pc, #640]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	029b      	lsls	r3, r3, #10
 80014cc:	4013      	ands	r3, r2
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0xaa>
 80014d0:	e013      	b.n	80014fa <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d2:	f7ff fccd 	bl	8000e70 <HAL_GetTick>
 80014d6:	0003      	movs	r3, r0
 80014d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fcc8 	bl	8000e70 <HAL_GetTick>
 80014e0:	0002      	movs	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e166      	b.n	80017bc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ee:	4b96      	ldr	r3, [pc, #600]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	029b      	lsls	r3, r3, #10
 80014f6:	4013      	ands	r3, r2
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2202      	movs	r2, #2
 8001500:	4013      	ands	r3, r2
 8001502:	d100      	bne.n	8001506 <HAL_RCC_OscConfig+0xfe>
 8001504:	e086      	b.n	8001614 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001506:	4b90      	ldr	r3, [pc, #576]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2238      	movs	r2, #56	; 0x38
 800150c:	4013      	ands	r3, r2
 800150e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d12f      	bne.n	8001576 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e14c      	b.n	80017bc <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b89      	ldr	r3, [pc, #548]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4a8b      	ldr	r2, [pc, #556]	; (8001754 <HAL_RCC_OscConfig+0x34c>)
 8001528:	4013      	ands	r3, r2
 800152a:	0019      	movs	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	021a      	lsls	r2, r3, #8
 8001532:	4b85      	ldr	r3, [pc, #532]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001534:	430a      	orrs	r2, r1
 8001536:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d112      	bne.n	8001564 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800153e:	4b82      	ldr	r3, [pc, #520]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a85      	ldr	r2, [pc, #532]	; (8001758 <HAL_RCC_OscConfig+0x350>)
 8001544:	4013      	ands	r3, r2
 8001546:	0019      	movs	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	4b7e      	ldr	r3, [pc, #504]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 800154e:	430a      	orrs	r2, r1
 8001550:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001552:	4b7d      	ldr	r3, [pc, #500]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	0adb      	lsrs	r3, r3, #11
 8001558:	2207      	movs	r2, #7
 800155a:	4013      	ands	r3, r2
 800155c:	4a7f      	ldr	r2, [pc, #508]	; (800175c <HAL_RCC_OscConfig+0x354>)
 800155e:	40da      	lsrs	r2, r3
 8001560:	4b7f      	ldr	r3, [pc, #508]	; (8001760 <HAL_RCC_OscConfig+0x358>)
 8001562:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001564:	4b7f      	ldr	r3, [pc, #508]	; (8001764 <HAL_RCC_OscConfig+0x35c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff fc25 	bl	8000db8 <HAL_InitTick>
 800156e:	1e03      	subs	r3, r0, #0
 8001570:	d050      	beq.n	8001614 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e122      	b.n	80017bc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d030      	beq.n	80015e0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800157e:	4b72      	ldr	r3, [pc, #456]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a75      	ldr	r2, [pc, #468]	; (8001758 <HAL_RCC_OscConfig+0x350>)
 8001584:	4013      	ands	r3, r2
 8001586:	0019      	movs	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	4b6e      	ldr	r3, [pc, #440]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001592:	4b6d      	ldr	r3, [pc, #436]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4b6c      	ldr	r3, [pc, #432]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	0049      	lsls	r1, r1, #1
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff fc66 	bl	8000e70 <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80015aa:	f7ff fc61 	bl	8000e70 <HAL_GetTick>
 80015ae:	0002      	movs	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0ff      	b.n	80017bc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015bc:	4b62      	ldr	r3, [pc, #392]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4013      	ands	r3, r2
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c8:	4b5f      	ldr	r3, [pc, #380]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4a61      	ldr	r2, [pc, #388]	; (8001754 <HAL_RCC_OscConfig+0x34c>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	021a      	lsls	r2, r3, #8
 80015d8:	4b5b      	ldr	r3, [pc, #364]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 80015da:	430a      	orrs	r2, r1
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	e019      	b.n	8001614 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80015e0:	4b59      	ldr	r3, [pc, #356]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b58      	ldr	r3, [pc, #352]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 80015e6:	4960      	ldr	r1, [pc, #384]	; (8001768 <HAL_RCC_OscConfig+0x360>)
 80015e8:	400a      	ands	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fc40 	bl	8000e70 <HAL_GetTick>
 80015f0:	0003      	movs	r3, r0
 80015f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80015f6:	f7ff fc3b 	bl	8000e70 <HAL_GetTick>
 80015fa:	0002      	movs	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0d9      	b.n	80017bc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001608:	4b4f      	ldr	r3, [pc, #316]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4013      	ands	r3, r2
 8001612:	d1f0      	bne.n	80015f6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2208      	movs	r2, #8
 800161a:	4013      	ands	r3, r2
 800161c:	d042      	beq.n	80016a4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800161e:	4b4a      	ldr	r3, [pc, #296]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2238      	movs	r2, #56	; 0x38
 8001624:	4013      	ands	r3, r2
 8001626:	2b18      	cmp	r3, #24
 8001628:	d105      	bne.n	8001636 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d138      	bne.n	80016a4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0c2      	b.n	80017bc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d019      	beq.n	8001672 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800163e:	4b42      	ldr	r3, [pc, #264]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001640:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001644:	2101      	movs	r1, #1
 8001646:	430a      	orrs	r2, r1
 8001648:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164a:	f7ff fc11 	bl	8000e70 <HAL_GetTick>
 800164e:	0003      	movs	r3, r0
 8001650:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001654:	f7ff fc0c 	bl	8000e70 <HAL_GetTick>
 8001658:	0002      	movs	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e0aa      	b.n	80017bc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001666:	4b38      	ldr	r3, [pc, #224]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	2202      	movs	r2, #2
 800166c:	4013      	ands	r3, r2
 800166e:	d0f1      	beq.n	8001654 <HAL_RCC_OscConfig+0x24c>
 8001670:	e018      	b.n	80016a4 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001672:	4b35      	ldr	r3, [pc, #212]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001674:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001678:	2101      	movs	r1, #1
 800167a:	438a      	bics	r2, r1
 800167c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff fbf7 	bl	8000e70 <HAL_GetTick>
 8001682:	0003      	movs	r3, r0
 8001684:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001688:	f7ff fbf2 	bl	8000e70 <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e090      	b.n	80017bc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800169a:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169e:	2202      	movs	r2, #2
 80016a0:	4013      	ands	r3, r2
 80016a2:	d1f1      	bne.n	8001688 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2204      	movs	r2, #4
 80016aa:	4013      	ands	r3, r2
 80016ac:	d100      	bne.n	80016b0 <HAL_RCC_OscConfig+0x2a8>
 80016ae:	e084      	b.n	80017ba <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b0:	230f      	movs	r3, #15
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2238      	movs	r2, #56	; 0x38
 80016be:	4013      	ands	r3, r2
 80016c0:	2b20      	cmp	r3, #32
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d000      	beq.n	80016ce <HAL_RCC_OscConfig+0x2c6>
 80016cc:	e075      	b.n	80017ba <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e074      	b.n	80017bc <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d106      	bne.n	80016e8 <HAL_RCC_OscConfig+0x2e0>
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 80016dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 80016e0:	2101      	movs	r1, #1
 80016e2:	430a      	orrs	r2, r1
 80016e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80016e6:	e01c      	b.n	8001722 <HAL_RCC_OscConfig+0x31a>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d10c      	bne.n	800170a <HAL_RCC_OscConfig+0x302>
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 80016f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 80016f6:	2104      	movs	r1, #4
 80016f8:	430a      	orrs	r2, r1
 80016fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 80016fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001702:	2101      	movs	r1, #1
 8001704:	430a      	orrs	r2, r1
 8001706:	65da      	str	r2, [r3, #92]	; 0x5c
 8001708:	e00b      	b.n	8001722 <HAL_RCC_OscConfig+0x31a>
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 800170c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001710:	2101      	movs	r1, #1
 8001712:	438a      	bics	r2, r1
 8001714:	65da      	str	r2, [r3, #92]	; 0x5c
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 8001718:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_OscConfig+0x340>)
 800171c:	2104      	movs	r1, #4
 800171e:	438a      	bics	r2, r1
 8001720:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d028      	beq.n	800177c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172a:	f7ff fba1 	bl	8000e70 <HAL_GetTick>
 800172e:	0003      	movs	r3, r0
 8001730:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001732:	e01d      	b.n	8001770 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001734:	f7ff fb9c 	bl	8000e70 <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_RCC_OscConfig+0x364>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d915      	bls.n	8001770 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e039      	b.n	80017bc <HAL_RCC_OscConfig+0x3b4>
 8001748:	40021000 	.word	0x40021000
 800174c:	fffeffff 	.word	0xfffeffff
 8001750:	fffbffff 	.word	0xfffbffff
 8001754:	ffff80ff 	.word	0xffff80ff
 8001758:	ffffc7ff 	.word	0xffffc7ff
 800175c:	02dc6c00 	.word	0x02dc6c00
 8001760:	20000000 	.word	0x20000000
 8001764:	20000004 	.word	0x20000004
 8001768:	fffffeff 	.word	0xfffffeff
 800176c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <HAL_RCC_OscConfig+0x3bc>)
 8001772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001774:	2202      	movs	r2, #2
 8001776:	4013      	ands	r3, r2
 8001778:	d0dc      	beq.n	8001734 <HAL_RCC_OscConfig+0x32c>
 800177a:	e013      	b.n	80017a4 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fb78 	bl	8000e70 <HAL_GetTick>
 8001780:	0003      	movs	r3, r0
 8001782:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001784:	e009      	b.n	800179a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001786:	f7ff fb73 	bl	8000e70 <HAL_GetTick>
 800178a:	0002      	movs	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <HAL_RCC_OscConfig+0x3c0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e010      	b.n	80017bc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_RCC_OscConfig+0x3bc>)
 800179c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179e:	2202      	movs	r2, #2
 80017a0:	4013      	ands	r3, r2
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80017a4:	230f      	movs	r3, #15
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d105      	bne.n	80017ba <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_RCC_OscConfig+0x3bc>)
 80017b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <HAL_RCC_OscConfig+0x3bc>)
 80017b4:	4905      	ldr	r1, [pc, #20]	; (80017cc <HAL_RCC_OscConfig+0x3c4>)
 80017b6:	400a      	ands	r2, r1
 80017b8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b006      	add	sp, #24
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000
 80017c8:	00001388 	.word	0x00001388
 80017cc:	efffffff 	.word	0xefffffff

080017d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0e9      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e4:	4b76      	ldr	r3, [pc, #472]	; (80019c0 <HAL_RCC_ClockConfig+0x1f0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2207      	movs	r2, #7
 80017ea:	4013      	ands	r3, r2
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d91e      	bls.n	8001830 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b73      	ldr	r3, [pc, #460]	; (80019c0 <HAL_RCC_ClockConfig+0x1f0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2207      	movs	r2, #7
 80017f8:	4393      	bics	r3, r2
 80017fa:	0019      	movs	r1, r3
 80017fc:	4b70      	ldr	r3, [pc, #448]	; (80019c0 <HAL_RCC_ClockConfig+0x1f0>)
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001804:	f7ff fb34 	bl	8000e70 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800180c:	e009      	b.n	8001822 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800180e:	f7ff fb2f 	bl	8000e70 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	4a6a      	ldr	r2, [pc, #424]	; (80019c4 <HAL_RCC_ClockConfig+0x1f4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e0ca      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001822:	4b67      	ldr	r3, [pc, #412]	; (80019c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2207      	movs	r2, #7
 8001828:	4013      	ands	r3, r2
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d1ee      	bne.n	800180e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2202      	movs	r2, #2
 8001836:	4013      	ands	r3, r2
 8001838:	d017      	beq.n	800186a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2204      	movs	r2, #4
 8001840:	4013      	ands	r3, r2
 8001842:	d008      	beq.n	8001856 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001844:	4b60      	ldr	r3, [pc, #384]	; (80019c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4a60      	ldr	r2, [pc, #384]	; (80019cc <HAL_RCC_ClockConfig+0x1fc>)
 800184a:	401a      	ands	r2, r3
 800184c:	4b5e      	ldr	r3, [pc, #376]	; (80019c8 <HAL_RCC_ClockConfig+0x1f8>)
 800184e:	21b0      	movs	r1, #176	; 0xb0
 8001850:	0109      	lsls	r1, r1, #4
 8001852:	430a      	orrs	r2, r1
 8001854:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001856:	4b5c      	ldr	r3, [pc, #368]	; (80019c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	4a5d      	ldr	r2, [pc, #372]	; (80019d0 <HAL_RCC_ClockConfig+0x200>)
 800185c:	4013      	ands	r3, r2
 800185e:	0019      	movs	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001866:	430a      	orrs	r2, r1
 8001868:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2201      	movs	r2, #1
 8001870:	4013      	ands	r3, r2
 8001872:	d055      	beq.n	8001920 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001874:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	221c      	movs	r2, #28
 800187a:	4393      	bics	r3, r2
 800187c:	0019      	movs	r1, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	4b51      	ldr	r3, [pc, #324]	; (80019c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001890:	4b4d      	ldr	r3, [pc, #308]	; (80019c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	029b      	lsls	r3, r3, #10
 8001898:	4013      	ands	r3, r2
 800189a:	d11f      	bne.n	80018dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e08b      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d107      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a8:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_ClockConfig+0x1f8>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4013      	ands	r3, r2
 80018b2:	d113      	bne.n	80018dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e07f      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d106      	bne.n	80018ce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80018c0:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <HAL_RCC_ClockConfig+0x1f8>)
 80018c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c4:	2202      	movs	r2, #2
 80018c6:	4013      	ands	r3, r2
 80018c8:	d108      	bne.n	80018dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e074      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80018ce:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <HAL_RCC_ClockConfig+0x1f8>)
 80018d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d2:	2202      	movs	r2, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	d101      	bne.n	80018dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e06d      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018dc:	4b3a      	ldr	r3, [pc, #232]	; (80019c8 <HAL_RCC_ClockConfig+0x1f8>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2207      	movs	r2, #7
 80018e2:	4393      	bics	r3, r2
 80018e4:	0019      	movs	r1, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <HAL_RCC_ClockConfig+0x1f8>)
 80018ec:	430a      	orrs	r2, r1
 80018ee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018f0:	f7ff fabe 	bl	8000e70 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f8:	e009      	b.n	800190e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80018fa:	f7ff fab9 	bl	8000e70 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	4a2f      	ldr	r2, [pc, #188]	; (80019c4 <HAL_RCC_ClockConfig+0x1f4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e054      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190e:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2238      	movs	r2, #56	; 0x38
 8001914:	401a      	ands	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	429a      	cmp	r2, r3
 800191e:	d1ec      	bne.n	80018fa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2207      	movs	r2, #7
 8001926:	4013      	ands	r3, r2
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d21e      	bcs.n	800196c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2207      	movs	r2, #7
 8001934:	4393      	bics	r3, r2
 8001936:	0019      	movs	r1, r3
 8001938:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_RCC_ClockConfig+0x1f0>)
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001940:	f7ff fa96 	bl	8000e70 <HAL_GetTick>
 8001944:	0003      	movs	r3, r0
 8001946:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001948:	e009      	b.n	800195e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800194a:	f7ff fa91 	bl	8000e70 <HAL_GetTick>
 800194e:	0002      	movs	r2, r0
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	4a1b      	ldr	r2, [pc, #108]	; (80019c4 <HAL_RCC_ClockConfig+0x1f4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e02c      	b.n	80019b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800195e:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2207      	movs	r2, #7
 8001964:	4013      	ands	r3, r2
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d1ee      	bne.n	800194a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2204      	movs	r2, #4
 8001972:	4013      	ands	r3, r2
 8001974:	d009      	beq.n	800198a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	4a16      	ldr	r2, [pc, #88]	; (80019d4 <HAL_RCC_ClockConfig+0x204>)
 800197c:	4013      	ands	r3, r2
 800197e:	0019      	movs	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001986:	430a      	orrs	r2, r1
 8001988:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800198a:	f000 f82b 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 800198e:	0001      	movs	r1, r0
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HAL_RCC_ClockConfig+0x1f8>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	220f      	movs	r2, #15
 8001998:	401a      	ands	r2, r3
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_RCC_ClockConfig+0x208>)
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	58d3      	ldr	r3, [r2, r3]
 80019a0:	221f      	movs	r2, #31
 80019a2:	4013      	ands	r3, r2
 80019a4:	000a      	movs	r2, r1
 80019a6:	40da      	lsrs	r2, r3
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_RCC_ClockConfig+0x20c>)
 80019aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_RCC_ClockConfig+0x210>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0018      	movs	r0, r3
 80019b2:	f7ff fa01 	bl	8000db8 <HAL_InitTick>
 80019b6:	0003      	movs	r3, r0
}
 80019b8:	0018      	movs	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b004      	add	sp, #16
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40022000 	.word	0x40022000
 80019c4:	00001388 	.word	0x00001388
 80019c8:	40021000 	.word	0x40021000
 80019cc:	ffff84ff 	.word	0xffff84ff
 80019d0:	fffff0ff 	.word	0xfffff0ff
 80019d4:	ffff8fff 	.word	0xffff8fff
 80019d8:	08002b2c 	.word	0x08002b2c
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000004 	.word	0x20000004

080019e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x78>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2238      	movs	r2, #56	; 0x38
 80019f0:	4013      	ands	r3, r2
 80019f2:	d10f      	bne.n	8001a14 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x78>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0adb      	lsrs	r3, r3, #11
 80019fa:	2207      	movs	r2, #7
 80019fc:	4013      	ands	r3, r2
 80019fe:	2201      	movs	r2, #1
 8001a00:	409a      	lsls	r2, r3
 8001a02:	0013      	movs	r3, r2
 8001a04:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a06:	6839      	ldr	r1, [r7, #0]
 8001a08:	4815      	ldr	r0, [pc, #84]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001a0a:	f7fe fb7d 	bl	8000108 <__udivsi3>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	e01e      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x78>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2238      	movs	r2, #56	; 0x38
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d102      	bne.n	8001a26 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x80>)
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	e015      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x78>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2238      	movs	r2, #56	; 0x38
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b20      	cmp	r3, #32
 8001a30:	d103      	bne.n	8001a3a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	021b      	lsls	r3, r3, #8
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	e00b      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x78>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2238      	movs	r2, #56	; 0x38
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b18      	cmp	r3, #24
 8001a44:	d103      	bne.n	8001a4e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a46:	23fa      	movs	r3, #250	; 0xfa
 8001a48:	01db      	lsls	r3, r3, #7
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	e001      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001a52:	687b      	ldr	r3, [r7, #4]
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b002      	add	sp, #8
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	02dc6c00 	.word	0x02dc6c00
 8001a64:	007a1200 	.word	0x007a1200

08001a68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a6c:	4b02      	ldr	r3, [pc, #8]	; (8001a78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	0018      	movs	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	20000000 	.word	0x20000000

08001a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001a80:	f7ff fff2 	bl	8001a68 <HAL_RCC_GetHCLKFreq>
 8001a84:	0001      	movs	r1, r0
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	0b1b      	lsrs	r3, r3, #12
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	401a      	ands	r2, r3
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	58d3      	ldr	r3, [r2, r3]
 8001a96:	221f      	movs	r2, #31
 8001a98:	4013      	ands	r3, r2
 8001a9a:	40d9      	lsrs	r1, r3
 8001a9c:	000b      	movs	r3, r1
}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	08002b6c 	.word	0x08002b6c

08001aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ab4:	2313      	movs	r3, #19
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001abc:	2312      	movs	r3, #18
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	029b      	lsls	r3, r3, #10
 8001acc:	4013      	ands	r3, r2
 8001ace:	d100      	bne.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ad0:	e079      	b.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad2:	2011      	movs	r0, #17
 8001ad4:	183b      	adds	r3, r7, r0
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ada:	4b64      	ldr	r3, [pc, #400]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	055b      	lsls	r3, r3, #21
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d110      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	4b61      	ldr	r3, [pc, #388]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aea:	4b60      	ldr	r3, [pc, #384]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	0549      	lsls	r1, r1, #21
 8001af0:	430a      	orrs	r2, r1
 8001af2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001af4:	4b5d      	ldr	r3, [pc, #372]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	055b      	lsls	r3, r3, #21
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b02:	183b      	adds	r3, r7, r0
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001b08:	4b58      	ldr	r3, [pc, #352]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b0c:	23c0      	movs	r3, #192	; 0xc0
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d019      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d014      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001b24:	4b51      	ldr	r3, [pc, #324]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	4a51      	ldr	r2, [pc, #324]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b2e:	4b4f      	ldr	r3, [pc, #316]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b32:	4b4e      	ldr	r3, [pc, #312]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b34:	2180      	movs	r1, #128	; 0x80
 8001b36:	0249      	lsls	r1, r1, #9
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b3c:	4b4b      	ldr	r3, [pc, #300]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b40:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b42:	494c      	ldr	r1, [pc, #304]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001b44:	400a      	ands	r2, r1
 8001b46:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001b48:	4b48      	ldr	r3, [pc, #288]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2201      	movs	r2, #1
 8001b52:	4013      	ands	r3, r2
 8001b54:	d016      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b56:	f7ff f98b 	bl	8000e70 <HAL_GetTick>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001b5e:	e00c      	b.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b60:	f7ff f986 	bl	8000e70 <HAL_GetTick>
 8001b64:	0002      	movs	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	4a43      	ldr	r2, [pc, #268]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d904      	bls.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8001b70:	2313      	movs	r3, #19
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	2203      	movs	r2, #3
 8001b76:	701a      	strb	r2, [r3, #0]
          break;
 8001b78:	e004      	b.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001b7a:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d0ed      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8001b84:	2313      	movs	r3, #19
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10a      	bne.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b8e:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b92:	4a37      	ldr	r2, [pc, #220]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	0019      	movs	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699a      	ldr	r2, [r3, #24]
 8001b9c:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ba2:	e005      	b.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ba4:	2312      	movs	r3, #18
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	2213      	movs	r2, #19
 8001baa:	18ba      	adds	r2, r7, r2
 8001bac:	7812      	ldrb	r2, [r2, #0]
 8001bae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bb0:	2311      	movs	r3, #17
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d105      	bne.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bba:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bbe:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bc0:	492e      	ldr	r1, [pc, #184]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d009      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bd0:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001be0:	430a      	orrs	r2, r1
 8001be2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2240      	movs	r2, #64	; 0x40
 8001bea:	4013      	ands	r3, r2
 8001bec:	d009      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bee:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	4a23      	ldr	r2, [pc, #140]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	01db      	lsls	r3, r3, #7
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d008      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	0899      	lsrs	r1, r3, #2
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d009      	beq.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	da09      	bge.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	22e0      	movs	r2, #224	; 0xe0
 8001c4e:	4393      	bics	r3, r2
 8001c50:	0019      	movs	r1, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001c5c:	2312      	movs	r3, #18
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	781b      	ldrb	r3, [r3, #0]
}
 8001c62:	0018      	movs	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b006      	add	sp, #24
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	fffffcff 	.word	0xfffffcff
 8001c74:	fffeffff 	.word	0xfffeffff
 8001c78:	00001388 	.word	0x00001388
 8001c7c:	efffffff 	.word	0xefffffff
 8001c80:	ffffcfff 	.word	0xffffcfff
 8001c84:	ffff3fff 	.word	0xffff3fff

08001c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e04a      	b.n	8001d30 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	223d      	movs	r2, #61	; 0x3d
 8001c9e:	5c9b      	ldrb	r3, [r3, r2]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d107      	bne.n	8001cb6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	223c      	movs	r2, #60	; 0x3c
 8001caa:	2100      	movs	r1, #0
 8001cac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7fe ff45 	bl	8000b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	223d      	movs	r2, #61	; 0x3d
 8001cba:	2102      	movs	r1, #2
 8001cbc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	0019      	movs	r1, r3
 8001cc8:	0010      	movs	r0, r2
 8001cca:	f000 f957 	bl	8001f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2248      	movs	r2, #72	; 0x48
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	223e      	movs	r2, #62	; 0x3e
 8001cda:	2101      	movs	r1, #1
 8001cdc:	5499      	strb	r1, [r3, r2]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	223f      	movs	r2, #63	; 0x3f
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	5499      	strb	r1, [r3, r2]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2240      	movs	r2, #64	; 0x40
 8001cea:	2101      	movs	r1, #1
 8001cec:	5499      	strb	r1, [r3, r2]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2241      	movs	r2, #65	; 0x41
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	5499      	strb	r1, [r3, r2]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2242      	movs	r2, #66	; 0x42
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	5499      	strb	r1, [r3, r2]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2243      	movs	r2, #67	; 0x43
 8001d02:	2101      	movs	r1, #1
 8001d04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2244      	movs	r2, #68	; 0x44
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	5499      	strb	r1, [r3, r2]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2245      	movs	r2, #69	; 0x45
 8001d12:	2101      	movs	r1, #1
 8001d14:	5499      	strb	r1, [r3, r2]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2246      	movs	r2, #70	; 0x46
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	5499      	strb	r1, [r3, r2]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2247      	movs	r2, #71	; 0x47
 8001d22:	2101      	movs	r1, #1
 8001d24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	223d      	movs	r2, #61	; 0x3d
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b002      	add	sp, #8
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2202      	movs	r2, #2
 8001d54:	4013      	ands	r3, r2
 8001d56:	d021      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d01d      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2203      	movs	r2, #3
 8001d66:	4252      	negs	r2, r2
 8001d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2203      	movs	r2, #3
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d004      	beq.n	8001d86 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f000 f8e4 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8001d84:	e007      	b.n	8001d96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 f8d7 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	0018      	movs	r0, r3
 8001d92:	f000 f8e3 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2204      	movs	r2, #4
 8001da0:	4013      	ands	r3, r2
 8001da2:	d022      	beq.n	8001dea <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2204      	movs	r2, #4
 8001da8:	4013      	ands	r3, r2
 8001daa:	d01e      	beq.n	8001dea <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2205      	movs	r2, #5
 8001db2:	4252      	negs	r2, r2
 8001db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2202      	movs	r2, #2
 8001dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699a      	ldr	r2, [r3, #24]
 8001dc2:	23c0      	movs	r3, #192	; 0xc0
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d004      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f000 f8bd 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8001dd2:	e007      	b.n	8001de4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f000 f8b0 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	0018      	movs	r0, r3
 8001de0:	f000 f8bc 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2208      	movs	r2, #8
 8001dee:	4013      	ands	r3, r2
 8001df0:	d021      	beq.n	8001e36 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2208      	movs	r2, #8
 8001df6:	4013      	ands	r3, r2
 8001df8:	d01d      	beq.n	8001e36 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2209      	movs	r2, #9
 8001e00:	4252      	negs	r2, r2
 8001e02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2204      	movs	r2, #4
 8001e08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	2203      	movs	r2, #3
 8001e12:	4013      	ands	r3, r2
 8001e14:	d004      	beq.n	8001e20 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f000 f897 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8001e1e:	e007      	b.n	8001e30 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	0018      	movs	r0, r3
 8001e24:	f000 f88a 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f000 f896 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2210      	movs	r2, #16
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d022      	beq.n	8001e84 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2210      	movs	r2, #16
 8001e42:	4013      	ands	r3, r2
 8001e44:	d01e      	beq.n	8001e84 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2211      	movs	r2, #17
 8001e4c:	4252      	negs	r2, r2
 8001e4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2208      	movs	r2, #8
 8001e54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	69da      	ldr	r2, [r3, #28]
 8001e5c:	23c0      	movs	r3, #192	; 0xc0
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d004      	beq.n	8001e6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	0018      	movs	r0, r3
 8001e68:	f000 f870 	bl	8001f4c <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e007      	b.n	8001e7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f000 f863 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f000 f86f 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2201      	movs	r2, #1
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d00c      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4013      	ands	r3, r2
 8001e92:	d008      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	4252      	negs	r2, r2
 8001e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7fe fd25 	bl	80008f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d00c      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2280      	movs	r2, #128	; 0x80
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d008      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2281      	movs	r2, #129	; 0x81
 8001ebc:	4252      	negs	r2, r2
 8001ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f000 f8ce 	bl	8002064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d00b      	beq.n	8001eea <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2280      	movs	r2, #128	; 0x80
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d007      	beq.n	8001eea <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a16      	ldr	r2, [pc, #88]	; (8001f38 <HAL_TIM_IRQHandler+0x200>)
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f000 f8c5 	bl	8002074 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2240      	movs	r2, #64	; 0x40
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d00c      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2240      	movs	r2, #64	; 0x40
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d008      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2241      	movs	r2, #65	; 0x41
 8001f00:	4252      	negs	r2, r2
 8001f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 f830 	bl	8001f6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	4013      	ands	r3, r2
 8001f12:	d00c      	beq.n	8001f2e <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2220      	movs	r2, #32
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d008      	beq.n	8001f2e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2221      	movs	r2, #33	; 0x21
 8001f22:	4252      	negs	r2, r2
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f000 f893 	bl	8002054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b004      	add	sp, #16
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	fffffeff 	.word	0xfffffeff

08001f3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b002      	add	sp, #8
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f54:	46c0      	nop			; (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b002      	add	sp, #8
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f74:	46c0      	nop			; (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b002      	add	sp, #8
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a2b      	ldr	r2, [pc, #172]	; (800203c <TIM_Base_SetConfig+0xc0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d003      	beq.n	8001f9c <TIM_Base_SetConfig+0x20>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a2a      	ldr	r2, [pc, #168]	; (8002040 <TIM_Base_SetConfig+0xc4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d108      	bne.n	8001fae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2270      	movs	r2, #112	; 0x70
 8001fa0:	4393      	bics	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a22      	ldr	r2, [pc, #136]	; (800203c <TIM_Base_SetConfig+0xc0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00f      	beq.n	8001fd6 <TIM_Base_SetConfig+0x5a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a21      	ldr	r2, [pc, #132]	; (8002040 <TIM_Base_SetConfig+0xc4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00b      	beq.n	8001fd6 <TIM_Base_SetConfig+0x5a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a20      	ldr	r2, [pc, #128]	; (8002044 <TIM_Base_SetConfig+0xc8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <TIM_Base_SetConfig+0x5a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <TIM_Base_SetConfig+0xcc>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d003      	beq.n	8001fd6 <TIM_Base_SetConfig+0x5a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a1e      	ldr	r2, [pc, #120]	; (800204c <TIM_Base_SetConfig+0xd0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d108      	bne.n	8001fe8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <TIM_Base_SetConfig+0xd4>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	4393      	bics	r3, r2
 8001fee:	001a      	movs	r2, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <TIM_Base_SetConfig+0xc0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d007      	beq.n	8002026 <TIM_Base_SetConfig+0xaa>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <TIM_Base_SetConfig+0xcc>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d003      	beq.n	8002026 <TIM_Base_SetConfig+0xaa>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a0a      	ldr	r2, [pc, #40]	; (800204c <TIM_Base_SetConfig+0xd0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d103      	bne.n	800202e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	615a      	str	r2, [r3, #20]
}
 8002034:	46c0      	nop			; (mov r8, r8)
 8002036:	46bd      	mov	sp, r7
 8002038:	b004      	add	sp, #16
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40012c00 	.word	0x40012c00
 8002040:	40000400 	.word	0x40000400
 8002044:	40002000 	.word	0x40002000
 8002048:	40014400 	.word	0x40014400
 800204c:	40014800 	.word	0x40014800
 8002050:	fffffcff 	.word	0xfffffcff

08002054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b002      	add	sp, #8
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800206c:	46c0      	nop			; (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	b002      	add	sp, #8
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800207c:	46c0      	nop			; (mov r8, r8)
 800207e:	46bd      	mov	sp, r7
 8002080:	b002      	add	sp, #8
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e046      	b.n	8002124 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2288      	movs	r2, #136	; 0x88
 800209a:	589b      	ldr	r3, [r3, r2]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d107      	bne.n	80020b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2284      	movs	r2, #132	; 0x84
 80020a4:	2100      	movs	r1, #0
 80020a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	0018      	movs	r0, r3
 80020ac:	f7fe fdbe 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2288      	movs	r2, #136	; 0x88
 80020b4:	2124      	movs	r1, #36	; 0x24
 80020b6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2101      	movs	r1, #1
 80020c4:	438a      	bics	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	0018      	movs	r0, r3
 80020d4:	f000 f9aa 	bl	800242c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 f828 	bl	8002130 <UART_SetConfig>
 80020e0:	0003      	movs	r3, r0
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e01c      	b.n	8002124 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	490d      	ldr	r1, [pc, #52]	; (800212c <HAL_UART_Init+0xa8>)
 80020f6:	400a      	ands	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	212a      	movs	r1, #42	; 0x2a
 8002106:	438a      	bics	r2, r1
 8002108:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2101      	movs	r1, #1
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	0018      	movs	r0, r3
 800211e:	f000 fa39 	bl	8002594 <UART_CheckIdleState>
 8002122:	0003      	movs	r3, r0
}
 8002124:	0018      	movs	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	b002      	add	sp, #8
 800212a:	bd80      	pop	{r7, pc}
 800212c:	ffffb7ff 	.word	0xffffb7ff

08002130 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002138:	231e      	movs	r3, #30
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4aab      	ldr	r2, [pc, #684]	; (800240c <UART_SetConfig+0x2dc>)
 8002160:	4013      	ands	r3, r2
 8002162:	0019      	movs	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4aa6      	ldr	r2, [pc, #664]	; (8002410 <UART_SetConfig+0x2e0>)
 8002176:	4013      	ands	r3, r2
 8002178:	0019      	movs	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4a9d      	ldr	r2, [pc, #628]	; (8002414 <UART_SetConfig+0x2e4>)
 800219e:	4013      	ands	r3, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	220f      	movs	r2, #15
 80021b4:	4393      	bics	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a93      	ldr	r2, [pc, #588]	; (8002418 <UART_SetConfig+0x2e8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d127      	bne.n	800221e <UART_SetConfig+0xee>
 80021ce:	4b93      	ldr	r3, [pc, #588]	; (800241c <UART_SetConfig+0x2ec>)
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	2203      	movs	r2, #3
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d017      	beq.n	800220a <UART_SetConfig+0xda>
 80021da:	d81b      	bhi.n	8002214 <UART_SetConfig+0xe4>
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d00a      	beq.n	80021f6 <UART_SetConfig+0xc6>
 80021e0:	d818      	bhi.n	8002214 <UART_SetConfig+0xe4>
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <UART_SetConfig+0xbc>
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d00a      	beq.n	8002200 <UART_SetConfig+0xd0>
 80021ea:	e013      	b.n	8002214 <UART_SetConfig+0xe4>
 80021ec:	231f      	movs	r3, #31
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
 80021f4:	e021      	b.n	800223a <UART_SetConfig+0x10a>
 80021f6:	231f      	movs	r3, #31
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	2202      	movs	r2, #2
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	e01c      	b.n	800223a <UART_SetConfig+0x10a>
 8002200:	231f      	movs	r3, #31
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	2204      	movs	r2, #4
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	e017      	b.n	800223a <UART_SetConfig+0x10a>
 800220a:	231f      	movs	r3, #31
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	2208      	movs	r2, #8
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	e012      	b.n	800223a <UART_SetConfig+0x10a>
 8002214:	231f      	movs	r3, #31
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	2210      	movs	r2, #16
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	e00d      	b.n	800223a <UART_SetConfig+0x10a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a7f      	ldr	r2, [pc, #508]	; (8002420 <UART_SetConfig+0x2f0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d104      	bne.n	8002232 <UART_SetConfig+0x102>
 8002228:	231f      	movs	r3, #31
 800222a:	18fb      	adds	r3, r7, r3
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	e003      	b.n	800223a <UART_SetConfig+0x10a>
 8002232:	231f      	movs	r3, #31
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	2210      	movs	r2, #16
 8002238:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69da      	ldr	r2, [r3, #28]
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	429a      	cmp	r2, r3
 8002244:	d000      	beq.n	8002248 <UART_SetConfig+0x118>
 8002246:	e06f      	b.n	8002328 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002248:	231f      	movs	r3, #31
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b08      	cmp	r3, #8
 8002250:	d01f      	beq.n	8002292 <UART_SetConfig+0x162>
 8002252:	dc22      	bgt.n	800229a <UART_SetConfig+0x16a>
 8002254:	2b04      	cmp	r3, #4
 8002256:	d017      	beq.n	8002288 <UART_SetConfig+0x158>
 8002258:	dc1f      	bgt.n	800229a <UART_SetConfig+0x16a>
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <UART_SetConfig+0x134>
 800225e:	2b02      	cmp	r3, #2
 8002260:	d005      	beq.n	800226e <UART_SetConfig+0x13e>
 8002262:	e01a      	b.n	800229a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002264:	f7ff fc0a 	bl	8001a7c <HAL_RCC_GetPCLK1Freq>
 8002268:	0003      	movs	r3, r0
 800226a:	61bb      	str	r3, [r7, #24]
        break;
 800226c:	e01c      	b.n	80022a8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800226e:	4b6b      	ldr	r3, [pc, #428]	; (800241c <UART_SetConfig+0x2ec>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2207      	movs	r2, #7
 8002276:	4013      	ands	r3, r2
 8002278:	3301      	adds	r3, #1
 800227a:	0019      	movs	r1, r3
 800227c:	4869      	ldr	r0, [pc, #420]	; (8002424 <UART_SetConfig+0x2f4>)
 800227e:	f7fd ff43 	bl	8000108 <__udivsi3>
 8002282:	0003      	movs	r3, r0
 8002284:	61bb      	str	r3, [r7, #24]
        break;
 8002286:	e00f      	b.n	80022a8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002288:	f7ff fbac 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 800228c:	0003      	movs	r3, r0
 800228e:	61bb      	str	r3, [r7, #24]
        break;
 8002290:	e00a      	b.n	80022a8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	61bb      	str	r3, [r7, #24]
        break;
 8002298:	e006      	b.n	80022a8 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800229e:	231e      	movs	r3, #30
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
        break;
 80022a6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d100      	bne.n	80022b0 <UART_SetConfig+0x180>
 80022ae:	e097      	b.n	80023e0 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022b4:	4b5c      	ldr	r3, [pc, #368]	; (8002428 <UART_SetConfig+0x2f8>)
 80022b6:	0052      	lsls	r2, r2, #1
 80022b8:	5ad3      	ldrh	r3, [r2, r3]
 80022ba:	0019      	movs	r1, r3
 80022bc:	69b8      	ldr	r0, [r7, #24]
 80022be:	f7fd ff23 	bl	8000108 <__udivsi3>
 80022c2:	0003      	movs	r3, r0
 80022c4:	005a      	lsls	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	085b      	lsrs	r3, r3, #1
 80022cc:	18d2      	adds	r2, r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	0019      	movs	r1, r3
 80022d4:	0010      	movs	r0, r2
 80022d6:	f7fd ff17 	bl	8000108 <__udivsi3>
 80022da:	0003      	movs	r3, r0
 80022dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b0f      	cmp	r3, #15
 80022e2:	d91c      	bls.n	800231e <UART_SetConfig+0x1ee>
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	025b      	lsls	r3, r3, #9
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d217      	bcs.n	800231e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	200e      	movs	r0, #14
 80022f4:	183b      	adds	r3, r7, r0
 80022f6:	210f      	movs	r1, #15
 80022f8:	438a      	bics	r2, r1
 80022fa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	085b      	lsrs	r3, r3, #1
 8002300:	b29b      	uxth	r3, r3
 8002302:	2207      	movs	r2, #7
 8002304:	4013      	ands	r3, r2
 8002306:	b299      	uxth	r1, r3
 8002308:	183b      	adds	r3, r7, r0
 800230a:	183a      	adds	r2, r7, r0
 800230c:	8812      	ldrh	r2, [r2, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	183a      	adds	r2, r7, r0
 8002318:	8812      	ldrh	r2, [r2, #0]
 800231a:	60da      	str	r2, [r3, #12]
 800231c:	e060      	b.n	80023e0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800231e:	231e      	movs	r3, #30
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e05b      	b.n	80023e0 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002328:	231f      	movs	r3, #31
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b08      	cmp	r3, #8
 8002330:	d01f      	beq.n	8002372 <UART_SetConfig+0x242>
 8002332:	dc22      	bgt.n	800237a <UART_SetConfig+0x24a>
 8002334:	2b04      	cmp	r3, #4
 8002336:	d017      	beq.n	8002368 <UART_SetConfig+0x238>
 8002338:	dc1f      	bgt.n	800237a <UART_SetConfig+0x24a>
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <UART_SetConfig+0x214>
 800233e:	2b02      	cmp	r3, #2
 8002340:	d005      	beq.n	800234e <UART_SetConfig+0x21e>
 8002342:	e01a      	b.n	800237a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002344:	f7ff fb9a 	bl	8001a7c <HAL_RCC_GetPCLK1Freq>
 8002348:	0003      	movs	r3, r0
 800234a:	61bb      	str	r3, [r7, #24]
        break;
 800234c:	e01c      	b.n	8002388 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800234e:	4b33      	ldr	r3, [pc, #204]	; (800241c <UART_SetConfig+0x2ec>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	2207      	movs	r2, #7
 8002356:	4013      	ands	r3, r2
 8002358:	3301      	adds	r3, #1
 800235a:	0019      	movs	r1, r3
 800235c:	4831      	ldr	r0, [pc, #196]	; (8002424 <UART_SetConfig+0x2f4>)
 800235e:	f7fd fed3 	bl	8000108 <__udivsi3>
 8002362:	0003      	movs	r3, r0
 8002364:	61bb      	str	r3, [r7, #24]
        break;
 8002366:	e00f      	b.n	8002388 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002368:	f7ff fb3c 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 800236c:	0003      	movs	r3, r0
 800236e:	61bb      	str	r3, [r7, #24]
        break;
 8002370:	e00a      	b.n	8002388 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	61bb      	str	r3, [r7, #24]
        break;
 8002378:	e006      	b.n	8002388 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800237e:	231e      	movs	r3, #30
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
        break;
 8002386:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d028      	beq.n	80023e0 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002392:	4b25      	ldr	r3, [pc, #148]	; (8002428 <UART_SetConfig+0x2f8>)
 8002394:	0052      	lsls	r2, r2, #1
 8002396:	5ad3      	ldrh	r3, [r2, r3]
 8002398:	0019      	movs	r1, r3
 800239a:	69b8      	ldr	r0, [r7, #24]
 800239c:	f7fd feb4 	bl	8000108 <__udivsi3>
 80023a0:	0003      	movs	r3, r0
 80023a2:	001a      	movs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	085b      	lsrs	r3, r3, #1
 80023aa:	18d2      	adds	r2, r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	0019      	movs	r1, r3
 80023b2:	0010      	movs	r0, r2
 80023b4:	f7fd fea8 	bl	8000108 <__udivsi3>
 80023b8:	0003      	movs	r3, r0
 80023ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b0f      	cmp	r3, #15
 80023c0:	d90a      	bls.n	80023d8 <UART_SetConfig+0x2a8>
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	025b      	lsls	r3, r3, #9
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d205      	bcs.n	80023d8 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	e003      	b.n	80023e0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80023d8:	231e      	movs	r3, #30
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	226a      	movs	r2, #106	; 0x6a
 80023e4:	2101      	movs	r1, #1
 80023e6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2268      	movs	r2, #104	; 0x68
 80023ec:	2101      	movs	r1, #1
 80023ee:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80023fc:	231e      	movs	r3, #30
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	781b      	ldrb	r3, [r3, #0]
}
 8002402:	0018      	movs	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	b008      	add	sp, #32
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	cfff69f3 	.word	0xcfff69f3
 8002410:	ffffcfff 	.word	0xffffcfff
 8002414:	11fff4ff 	.word	0x11fff4ff
 8002418:	40013800 	.word	0x40013800
 800241c:	40021000 	.word	0x40021000
 8002420:	40004400 	.word	0x40004400
 8002424:	02dc6c00 	.word	0x02dc6c00
 8002428:	08002b8c 	.word	0x08002b8c

0800242c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	2208      	movs	r2, #8
 800243a:	4013      	ands	r3, r2
 800243c:	d00b      	beq.n	8002456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a4a      	ldr	r2, [pc, #296]	; (8002570 <UART_AdvFeatureConfig+0x144>)
 8002446:	4013      	ands	r3, r2
 8002448:	0019      	movs	r1, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	2201      	movs	r2, #1
 800245c:	4013      	ands	r3, r2
 800245e:	d00b      	beq.n	8002478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4a43      	ldr	r2, [pc, #268]	; (8002574 <UART_AdvFeatureConfig+0x148>)
 8002468:	4013      	ands	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	2202      	movs	r2, #2
 800247e:	4013      	ands	r3, r2
 8002480:	d00b      	beq.n	800249a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a3b      	ldr	r2, [pc, #236]	; (8002578 <UART_AdvFeatureConfig+0x14c>)
 800248a:	4013      	ands	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	2204      	movs	r2, #4
 80024a0:	4013      	ands	r3, r2
 80024a2:	d00b      	beq.n	80024bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4a34      	ldr	r2, [pc, #208]	; (800257c <UART_AdvFeatureConfig+0x150>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	0019      	movs	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	2210      	movs	r2, #16
 80024c2:	4013      	ands	r3, r2
 80024c4:	d00b      	beq.n	80024de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a2c      	ldr	r2, [pc, #176]	; (8002580 <UART_AdvFeatureConfig+0x154>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	2220      	movs	r2, #32
 80024e4:	4013      	ands	r3, r2
 80024e6:	d00b      	beq.n	8002500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4a25      	ldr	r2, [pc, #148]	; (8002584 <UART_AdvFeatureConfig+0x158>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	2240      	movs	r2, #64	; 0x40
 8002506:	4013      	ands	r3, r2
 8002508:	d01d      	beq.n	8002546 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <UART_AdvFeatureConfig+0x15c>)
 8002512:	4013      	ands	r3, r2
 8002514:	0019      	movs	r1, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	035b      	lsls	r3, r3, #13
 800252a:	429a      	cmp	r2, r3
 800252c:	d10b      	bne.n	8002546 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a15      	ldr	r2, [pc, #84]	; (800258c <UART_AdvFeatureConfig+0x160>)
 8002536:	4013      	ands	r3, r2
 8002538:	0019      	movs	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	2280      	movs	r2, #128	; 0x80
 800254c:	4013      	ands	r3, r2
 800254e:	d00b      	beq.n	8002568 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <UART_AdvFeatureConfig+0x164>)
 8002558:	4013      	ands	r3, r2
 800255a:	0019      	movs	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	605a      	str	r2, [r3, #4]
  }
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}
 8002570:	ffff7fff 	.word	0xffff7fff
 8002574:	fffdffff 	.word	0xfffdffff
 8002578:	fffeffff 	.word	0xfffeffff
 800257c:	fffbffff 	.word	0xfffbffff
 8002580:	ffffefff 	.word	0xffffefff
 8002584:	ffffdfff 	.word	0xffffdfff
 8002588:	ffefffff 	.word	0xffefffff
 800258c:	ff9fffff 	.word	0xff9fffff
 8002590:	fff7ffff 	.word	0xfff7ffff

08002594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b092      	sub	sp, #72	; 0x48
 8002598:	af02      	add	r7, sp, #8
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2290      	movs	r2, #144	; 0x90
 80025a0:	2100      	movs	r1, #0
 80025a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025a4:	f7fe fc64 	bl	8000e70 <HAL_GetTick>
 80025a8:	0003      	movs	r3, r0
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2208      	movs	r2, #8
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d12d      	bne.n	8002616 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	0391      	lsls	r1, r2, #14
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4a47      	ldr	r2, [pc, #284]	; (80026e0 <UART_CheckIdleState+0x14c>)
 80025c4:	9200      	str	r2, [sp, #0]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f000 f88e 	bl	80026e8 <UART_WaitOnFlagUntilTimeout>
 80025cc:	1e03      	subs	r3, r0, #0
 80025ce:	d022      	beq.n	8002616 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80025d0:	f3ef 8310 	mrs	r3, PRIMASK
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80025d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80025da:	2301      	movs	r3, #1
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e0:	f383 8810 	msr	PRIMASK, r3
}
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2180      	movs	r1, #128	; 0x80
 80025f2:	438a      	bics	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	f383 8810 	msr	PRIMASK, r3
}
 8002600:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2288      	movs	r2, #136	; 0x88
 8002606:	2120      	movs	r1, #32
 8002608:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2284      	movs	r2, #132	; 0x84
 800260e:	2100      	movs	r1, #0
 8002610:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e060      	b.n	80026d8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2204      	movs	r2, #4
 800261e:	4013      	ands	r3, r2
 8002620:	2b04      	cmp	r3, #4
 8002622:	d146      	bne.n	80026b2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002626:	2280      	movs	r2, #128	; 0x80
 8002628:	03d1      	lsls	r1, r2, #15
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4a2c      	ldr	r2, [pc, #176]	; (80026e0 <UART_CheckIdleState+0x14c>)
 800262e:	9200      	str	r2, [sp, #0]
 8002630:	2200      	movs	r2, #0
 8002632:	f000 f859 	bl	80026e8 <UART_WaitOnFlagUntilTimeout>
 8002636:	1e03      	subs	r3, r0, #0
 8002638:	d03b      	beq.n	80026b2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800263a:	f3ef 8310 	mrs	r3, PRIMASK
 800263e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002640:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002642:	637b      	str	r3, [r7, #52]	; 0x34
 8002644:	2301      	movs	r3, #1
 8002646:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f383 8810 	msr	PRIMASK, r3
}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4922      	ldr	r1, [pc, #136]	; (80026e4 <UART_CheckIdleState+0x150>)
 800265c:	400a      	ands	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002662:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f383 8810 	msr	PRIMASK, r3
}
 800266a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800266c:	f3ef 8310 	mrs	r3, PRIMASK
 8002670:	61bb      	str	r3, [r7, #24]
  return(result);
 8002672:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002674:	633b      	str	r3, [r7, #48]	; 0x30
 8002676:	2301      	movs	r3, #1
 8002678:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f383 8810 	msr	PRIMASK, r3
}
 8002680:	46c0      	nop			; (mov r8, r8)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2101      	movs	r1, #1
 800268e:	438a      	bics	r2, r1
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	f383 8810 	msr	PRIMASK, r3
}
 800269c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	228c      	movs	r2, #140	; 0x8c
 80026a2:	2120      	movs	r1, #32
 80026a4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2284      	movs	r2, #132	; 0x84
 80026aa:	2100      	movs	r1, #0
 80026ac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e012      	b.n	80026d8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2288      	movs	r2, #136	; 0x88
 80026b6:	2120      	movs	r1, #32
 80026b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	228c      	movs	r2, #140	; 0x8c
 80026be:	2120      	movs	r1, #32
 80026c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2284      	movs	r2, #132	; 0x84
 80026d2:	2100      	movs	r1, #0
 80026d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	b010      	add	sp, #64	; 0x40
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	01ffffff 	.word	0x01ffffff
 80026e4:	fffffedf 	.word	0xfffffedf

080026e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	1dfb      	adds	r3, r7, #7
 80026f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f8:	e04b      	b.n	8002792 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	3301      	adds	r3, #1
 80026fe:	d048      	beq.n	8002792 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002700:	f7fe fbb6 	bl	8000e70 <HAL_GetTick>
 8002704:	0002      	movs	r2, r0
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	429a      	cmp	r2, r3
 800270e:	d302      	bcc.n	8002716 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e04b      	b.n	80027b2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2204      	movs	r2, #4
 8002722:	4013      	ands	r3, r2
 8002724:	d035      	beq.n	8002792 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2208      	movs	r2, #8
 800272e:	4013      	ands	r3, r2
 8002730:	2b08      	cmp	r3, #8
 8002732:	d111      	bne.n	8002758 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2208      	movs	r2, #8
 800273a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	0018      	movs	r0, r3
 8002740:	f000 f83c 	bl	80027bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2290      	movs	r2, #144	; 0x90
 8002748:	2108      	movs	r1, #8
 800274a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2284      	movs	r2, #132	; 0x84
 8002750:	2100      	movs	r1, #0
 8002752:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e02c      	b.n	80027b2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69da      	ldr	r2, [r3, #28]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	401a      	ands	r2, r3
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	429a      	cmp	r2, r3
 800276a:	d112      	bne.n	8002792 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2280      	movs	r2, #128	; 0x80
 8002772:	0112      	lsls	r2, r2, #4
 8002774:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	0018      	movs	r0, r3
 800277a:	f000 f81f 	bl	80027bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2290      	movs	r2, #144	; 0x90
 8002782:	2120      	movs	r1, #32
 8002784:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2284      	movs	r2, #132	; 0x84
 800278a:	2100      	movs	r1, #0
 800278c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e00f      	b.n	80027b2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	4013      	ands	r3, r2
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	425a      	negs	r2, r3
 80027a2:	4153      	adcs	r3, r2
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	001a      	movs	r2, r3
 80027a8:	1dfb      	adds	r3, r7, #7
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d0a4      	beq.n	80026fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b004      	add	sp, #16
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08e      	sub	sp, #56	; 0x38
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80027c4:	f3ef 8310 	mrs	r3, PRIMASK
 80027c8:	617b      	str	r3, [r7, #20]
  return(result);
 80027ca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80027cc:	637b      	str	r3, [r7, #52]	; 0x34
 80027ce:	2301      	movs	r3, #1
 80027d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f383 8810 	msr	PRIMASK, r3
}
 80027d8:	46c0      	nop			; (mov r8, r8)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4926      	ldr	r1, [pc, #152]	; (8002880 <UART_EndRxTransfer+0xc4>)
 80027e6:	400a      	ands	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f383 8810 	msr	PRIMASK, r3
}
 80027f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80027f6:	f3ef 8310 	mrs	r3, PRIMASK
 80027fa:	623b      	str	r3, [r7, #32]
  return(result);
 80027fc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30
 8002800:	2301      	movs	r3, #1
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	f383 8810 	msr	PRIMASK, r3
}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	491b      	ldr	r1, [pc, #108]	; (8002884 <UART_EndRxTransfer+0xc8>)
 8002818:	400a      	ands	r2, r1
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	f383 8810 	msr	PRIMASK, r3
}
 8002826:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800282c:	2b01      	cmp	r3, #1
 800282e:	d118      	bne.n	8002862 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002830:	f3ef 8310 	mrs	r3, PRIMASK
 8002834:	60bb      	str	r3, [r7, #8]
  return(result);
 8002836:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800283a:	2301      	movs	r3, #1
 800283c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f383 8810 	msr	PRIMASK, r3
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2110      	movs	r1, #16
 8002852:	438a      	bics	r2, r1
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f383 8810 	msr	PRIMASK, r3
}
 8002860:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	228c      	movs	r2, #140	; 0x8c
 8002866:	2120      	movs	r1, #32
 8002868:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	b00e      	add	sp, #56	; 0x38
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	fffffedf 	.word	0xfffffedf
 8002884:	effffffe 	.word	0xeffffffe

08002888 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2284      	movs	r2, #132	; 0x84
 8002894:	5c9b      	ldrb	r3, [r3, r2]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UARTEx_DisableFifoMode+0x16>
 800289a:	2302      	movs	r3, #2
 800289c:	e027      	b.n	80028ee <HAL_UARTEx_DisableFifoMode+0x66>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2284      	movs	r2, #132	; 0x84
 80028a2:	2101      	movs	r1, #1
 80028a4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2288      	movs	r2, #136	; 0x88
 80028aa:	2124      	movs	r1, #36	; 0x24
 80028ac:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2101      	movs	r1, #1
 80028c2:	438a      	bics	r2, r1
 80028c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2288      	movs	r2, #136	; 0x88
 80028e0:	2120      	movs	r1, #32
 80028e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2284      	movs	r2, #132	; 0x84
 80028e8:	2100      	movs	r1, #0
 80028ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	0018      	movs	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b004      	add	sp, #16
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	dfffffff 	.word	0xdfffffff

080028fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2284      	movs	r2, #132	; 0x84
 800290a:	5c9b      	ldrb	r3, [r3, r2]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002910:	2302      	movs	r3, #2
 8002912:	e02e      	b.n	8002972 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2284      	movs	r2, #132	; 0x84
 8002918:	2101      	movs	r1, #1
 800291a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2288      	movs	r2, #136	; 0x88
 8002920:	2124      	movs	r1, #36	; 0x24
 8002922:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2101      	movs	r1, #1
 8002938:	438a      	bics	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	08d9      	lsrs	r1, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	0018      	movs	r0, r3
 8002954:	f000 f854 	bl	8002a00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2288      	movs	r2, #136	; 0x88
 8002964:	2120      	movs	r1, #32
 8002966:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2284      	movs	r2, #132	; 0x84
 800296c:	2100      	movs	r1, #0
 800296e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	0018      	movs	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	b004      	add	sp, #16
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2284      	movs	r2, #132	; 0x84
 800298a:	5c9b      	ldrb	r3, [r3, r2]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002990:	2302      	movs	r3, #2
 8002992:	e02f      	b.n	80029f4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2284      	movs	r2, #132	; 0x84
 8002998:	2101      	movs	r1, #1
 800299a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2288      	movs	r2, #136	; 0x88
 80029a0:	2124      	movs	r1, #36	; 0x24
 80029a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2101      	movs	r1, #1
 80029b8:	438a      	bics	r2, r1
 80029ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	0018      	movs	r0, r3
 80029d6:	f000 f813 	bl	8002a00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2288      	movs	r2, #136	; 0x88
 80029e6:	2120      	movs	r1, #32
 80029e8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2284      	movs	r2, #132	; 0x84
 80029ee:	2100      	movs	r1, #0
 80029f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	0018      	movs	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b004      	add	sp, #16
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	f1ffffff 	.word	0xf1ffffff

08002a00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d108      	bne.n	8002a22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	226a      	movs	r2, #106	; 0x6a
 8002a14:	2101      	movs	r1, #1
 8002a16:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2268      	movs	r2, #104	; 0x68
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002a20:	e043      	b.n	8002aaa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002a22:	260f      	movs	r6, #15
 8002a24:	19bb      	adds	r3, r7, r6
 8002a26:	2208      	movs	r2, #8
 8002a28:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002a2a:	200e      	movs	r0, #14
 8002a2c:	183b      	adds	r3, r7, r0
 8002a2e:	2208      	movs	r2, #8
 8002a30:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	0e5b      	lsrs	r3, r3, #25
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	240d      	movs	r4, #13
 8002a3e:	193b      	adds	r3, r7, r4
 8002a40:	2107      	movs	r1, #7
 8002a42:	400a      	ands	r2, r1
 8002a44:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	0f5b      	lsrs	r3, r3, #29
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	250c      	movs	r5, #12
 8002a52:	197b      	adds	r3, r7, r5
 8002a54:	2107      	movs	r1, #7
 8002a56:	400a      	ands	r2, r1
 8002a58:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002a5a:	183b      	adds	r3, r7, r0
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	197a      	adds	r2, r7, r5
 8002a60:	7812      	ldrb	r2, [r2, #0]
 8002a62:	4914      	ldr	r1, [pc, #80]	; (8002ab4 <UARTEx_SetNbDataToProcess+0xb4>)
 8002a64:	5c8a      	ldrb	r2, [r1, r2]
 8002a66:	435a      	muls	r2, r3
 8002a68:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002a6a:	197b      	adds	r3, r7, r5
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <UARTEx_SetNbDataToProcess+0xb8>)
 8002a70:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002a72:	0019      	movs	r1, r3
 8002a74:	f7fd fbd2 	bl	800021c <__divsi3>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	b299      	uxth	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	226a      	movs	r2, #106	; 0x6a
 8002a80:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002a82:	19bb      	adds	r3, r7, r6
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	193a      	adds	r2, r7, r4
 8002a88:	7812      	ldrb	r2, [r2, #0]
 8002a8a:	490a      	ldr	r1, [pc, #40]	; (8002ab4 <UARTEx_SetNbDataToProcess+0xb4>)
 8002a8c:	5c8a      	ldrb	r2, [r1, r2]
 8002a8e:	435a      	muls	r2, r3
 8002a90:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002a92:	193b      	adds	r3, r7, r4
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	4a08      	ldr	r2, [pc, #32]	; (8002ab8 <UARTEx_SetNbDataToProcess+0xb8>)
 8002a98:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	f7fd fbbe 	bl	800021c <__divsi3>
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	b299      	uxth	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2268      	movs	r2, #104	; 0x68
 8002aa8:	5299      	strh	r1, [r3, r2]
}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b005      	add	sp, #20
 8002ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	08002ba4 	.word	0x08002ba4
 8002ab8:	08002bac 	.word	0x08002bac

08002abc <memset>:
 8002abc:	0003      	movs	r3, r0
 8002abe:	1882      	adds	r2, r0, r2
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d100      	bne.n	8002ac6 <memset+0xa>
 8002ac4:	4770      	bx	lr
 8002ac6:	7019      	strb	r1, [r3, #0]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	e7f9      	b.n	8002ac0 <memset+0x4>

08002acc <__libc_init_array>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	2600      	movs	r6, #0
 8002ad0:	4c0c      	ldr	r4, [pc, #48]	; (8002b04 <__libc_init_array+0x38>)
 8002ad2:	4d0d      	ldr	r5, [pc, #52]	; (8002b08 <__libc_init_array+0x3c>)
 8002ad4:	1b64      	subs	r4, r4, r5
 8002ad6:	10a4      	asrs	r4, r4, #2
 8002ad8:	42a6      	cmp	r6, r4
 8002ada:	d109      	bne.n	8002af0 <__libc_init_array+0x24>
 8002adc:	2600      	movs	r6, #0
 8002ade:	f000 f819 	bl	8002b14 <_init>
 8002ae2:	4c0a      	ldr	r4, [pc, #40]	; (8002b0c <__libc_init_array+0x40>)
 8002ae4:	4d0a      	ldr	r5, [pc, #40]	; (8002b10 <__libc_init_array+0x44>)
 8002ae6:	1b64      	subs	r4, r4, r5
 8002ae8:	10a4      	asrs	r4, r4, #2
 8002aea:	42a6      	cmp	r6, r4
 8002aec:	d105      	bne.n	8002afa <__libc_init_array+0x2e>
 8002aee:	bd70      	pop	{r4, r5, r6, pc}
 8002af0:	00b3      	lsls	r3, r6, #2
 8002af2:	58eb      	ldr	r3, [r5, r3]
 8002af4:	4798      	blx	r3
 8002af6:	3601      	adds	r6, #1
 8002af8:	e7ee      	b.n	8002ad8 <__libc_init_array+0xc>
 8002afa:	00b3      	lsls	r3, r6, #2
 8002afc:	58eb      	ldr	r3, [r5, r3]
 8002afe:	4798      	blx	r3
 8002b00:	3601      	adds	r6, #1
 8002b02:	e7f2      	b.n	8002aea <__libc_init_array+0x1e>
 8002b04:	08002bb4 	.word	0x08002bb4
 8002b08:	08002bb4 	.word	0x08002bb4
 8002b0c:	08002bb8 	.word	0x08002bb8
 8002b10:	08002bb4 	.word	0x08002bb4

08002b14 <_init>:
 8002b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1a:	bc08      	pop	{r3}
 8002b1c:	469e      	mov	lr, r3
 8002b1e:	4770      	bx	lr

08002b20 <_fini>:
 8002b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b26:	bc08      	pop	{r3}
 8002b28:	469e      	mov	lr, r3
 8002b2a:	4770      	bx	lr
